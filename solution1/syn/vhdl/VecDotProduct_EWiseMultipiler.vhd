-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity VecDotProduct_EWiseMultipiler is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    fifoA21_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    fifoA21_empty_n : IN STD_LOGIC;
    fifoA21_read : OUT STD_LOGIC;
    fifoB22_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    fifoB22_empty_n : IN STD_LOGIC;
    fifoB22_read : OUT STD_LOGIC;
    fifoC123_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    fifoC123_full_n : IN STD_LOGIC;
    fifoC123_write : OUT STD_LOGIC;
    readRep : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of VecDotProduct_EWiseMultipiler is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal fifoA21_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln10_reg_731 : STD_LOGIC_VECTOR (0 downto 0);
    signal fifoB22_blk_n : STD_LOGIC;
    signal fifoC123_blk_n : STD_LOGIC;
    signal i_reg_131 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln10_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln10_fu_151_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln3_fu_142_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln674_fu_157_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln674_1_fu_165_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_3_fu_179_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_4_fu_193_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_6_fu_213_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_7_fu_227_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_9_fu_247_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_fu_261_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_2_fu_281_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_5_fu_295_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_8_fu_315_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_1_fu_329_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_10_fu_349_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_11_fu_363_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_12_fu_383_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_13_fu_397_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_14_fu_417_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_15_fu_431_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_16_fu_451_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_17_fu_465_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_18_fu_485_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_19_fu_499_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_20_fu_519_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_21_fu_533_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_22_fu_553_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_23_fu_567_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_24_fu_587_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_25_fu_601_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_26_fu_621_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_27_fu_635_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_28_fu_655_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_29_fu_669_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln19_15_fu_683_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln19_14_fu_649_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln19_13_fu_615_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln19_12_fu_581_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln19_11_fu_547_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln19_10_fu_513_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln19_9_fu_479_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln19_8_fu_445_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln19_7_fu_411_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln19_6_fu_377_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln19_5_fu_343_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln19_4_fu_309_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln19_3_fu_275_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln19_2_fu_241_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln19_1_fu_207_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln19_fu_173_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component VecDotProduct_mul_8s_8s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    mul_8s_8s_16_1_1_U15 : component VecDotProduct_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => trunc_ln674_fu_157_p1,
        din1 => trunc_ln674_1_fu_165_p1,
        dout => mul_ln19_fu_173_p2);

    mul_8s_8s_16_1_1_U16 : component VecDotProduct_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => p_Result_3_fu_179_p4,
        din1 => p_Result_4_fu_193_p4,
        dout => mul_ln19_1_fu_207_p2);

    mul_8s_8s_16_1_1_U17 : component VecDotProduct_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => p_Result_6_fu_213_p4,
        din1 => p_Result_7_fu_227_p4,
        dout => mul_ln19_2_fu_241_p2);

    mul_8s_8s_16_1_1_U18 : component VecDotProduct_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => p_Result_9_fu_247_p4,
        din1 => p_Result_s_fu_261_p4,
        dout => mul_ln19_3_fu_275_p2);

    mul_8s_8s_16_1_1_U19 : component VecDotProduct_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => p_Result_2_fu_281_p4,
        din1 => p_Result_5_fu_295_p4,
        dout => mul_ln19_4_fu_309_p2);

    mul_8s_8s_16_1_1_U20 : component VecDotProduct_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => p_Result_8_fu_315_p4,
        din1 => p_Result_1_fu_329_p4,
        dout => mul_ln19_5_fu_343_p2);

    mul_8s_8s_16_1_1_U21 : component VecDotProduct_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => p_Result_10_fu_349_p4,
        din1 => p_Result_11_fu_363_p4,
        dout => mul_ln19_6_fu_377_p2);

    mul_8s_8s_16_1_1_U22 : component VecDotProduct_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => p_Result_12_fu_383_p4,
        din1 => p_Result_13_fu_397_p4,
        dout => mul_ln19_7_fu_411_p2);

    mul_8s_8s_16_1_1_U23 : component VecDotProduct_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => p_Result_14_fu_417_p4,
        din1 => p_Result_15_fu_431_p4,
        dout => mul_ln19_8_fu_445_p2);

    mul_8s_8s_16_1_1_U24 : component VecDotProduct_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => p_Result_16_fu_451_p4,
        din1 => p_Result_17_fu_465_p4,
        dout => mul_ln19_9_fu_479_p2);

    mul_8s_8s_16_1_1_U25 : component VecDotProduct_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => p_Result_18_fu_485_p4,
        din1 => p_Result_19_fu_499_p4,
        dout => mul_ln19_10_fu_513_p2);

    mul_8s_8s_16_1_1_U26 : component VecDotProduct_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => p_Result_20_fu_519_p4,
        din1 => p_Result_21_fu_533_p4,
        dout => mul_ln19_11_fu_547_p2);

    mul_8s_8s_16_1_1_U27 : component VecDotProduct_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => p_Result_22_fu_553_p4,
        din1 => p_Result_23_fu_567_p4,
        dout => mul_ln19_12_fu_581_p2);

    mul_8s_8s_16_1_1_U28 : component VecDotProduct_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => p_Result_24_fu_587_p4,
        din1 => p_Result_25_fu_601_p4,
        dout => mul_ln19_13_fu_615_p2);

    mul_8s_8s_16_1_1_U29 : component VecDotProduct_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => p_Result_26_fu_621_p4,
        din1 => p_Result_27_fu_635_p4,
        dout => mul_ln19_14_fu_649_p2);

    mul_8s_8s_16_1_1_U30 : component VecDotProduct_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => p_Result_28_fu_655_p4,
        din1 => p_Result_29_fu_669_p4,
        dout => mul_ln19_15_fu_683_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln10_fu_146_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_131 <= add_ln10_fu_151_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_131 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln10_reg_731 <= icmp_ln10_fu_146_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln10_fu_146_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln10_fu_146_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln10_fu_146_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln10_fu_151_p2 <= std_logic_vector(unsigned(i_reg_131) + unsigned(ap_const_lv31_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(fifoA21_empty_n, fifoB22_empty_n, fifoC123_full_n, ap_enable_reg_pp0_iter1, icmp_ln10_reg_731)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln10_reg_731 = ap_const_lv1_1) and (fifoC123_full_n = ap_const_logic_0)) or ((icmp_ln10_reg_731 = ap_const_lv1_1) and (fifoB22_empty_n = ap_const_logic_0)) or ((icmp_ln10_reg_731 = ap_const_lv1_1) and (fifoA21_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(fifoA21_empty_n, fifoB22_empty_n, fifoC123_full_n, ap_enable_reg_pp0_iter1, icmp_ln10_reg_731)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln10_reg_731 = ap_const_lv1_1) and (fifoC123_full_n = ap_const_logic_0)) or ((icmp_ln10_reg_731 = ap_const_lv1_1) and (fifoB22_empty_n = ap_const_logic_0)) or ((icmp_ln10_reg_731 = ap_const_lv1_1) and (fifoA21_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(fifoA21_empty_n, fifoB22_empty_n, fifoC123_full_n, ap_enable_reg_pp0_iter1, icmp_ln10_reg_731)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln10_reg_731 = ap_const_lv1_1) and (fifoC123_full_n = ap_const_logic_0)) or ((icmp_ln10_reg_731 = ap_const_lv1_1) and (fifoB22_empty_n = ap_const_logic_0)) or ((icmp_ln10_reg_731 = ap_const_lv1_1) and (fifoA21_empty_n = ap_const_logic_0))));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(fifoA21_empty_n, fifoB22_empty_n, fifoC123_full_n, icmp_ln10_reg_731)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((icmp_ln10_reg_731 = ap_const_lv1_1) and (fifoC123_full_n = ap_const_logic_0)) or ((icmp_ln10_reg_731 = ap_const_lv1_1) and (fifoB22_empty_n = ap_const_logic_0)) or ((icmp_ln10_reg_731 = ap_const_lv1_1) and (fifoA21_empty_n = ap_const_logic_0)));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln10_fu_146_p2)
    begin
        if ((icmp_ln10_fu_146_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    fifoA21_blk_n_assign_proc : process(fifoA21_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln10_reg_731)
    begin
        if (((icmp_ln10_reg_731 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifoA21_blk_n <= fifoA21_empty_n;
        else 
            fifoA21_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifoA21_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln10_reg_731, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln10_reg_731 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifoA21_read <= ap_const_logic_1;
        else 
            fifoA21_read <= ap_const_logic_0;
        end if; 
    end process;


    fifoB22_blk_n_assign_proc : process(fifoB22_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln10_reg_731)
    begin
        if (((icmp_ln10_reg_731 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifoB22_blk_n <= fifoB22_empty_n;
        else 
            fifoB22_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifoB22_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln10_reg_731, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln10_reg_731 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifoB22_read <= ap_const_logic_1;
        else 
            fifoB22_read <= ap_const_logic_0;
        end if; 
    end process;


    fifoC123_blk_n_assign_proc : process(fifoC123_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln10_reg_731)
    begin
        if (((icmp_ln10_reg_731 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifoC123_blk_n <= fifoC123_full_n;
        else 
            fifoC123_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifoC123_din <= (((((((((((((((mul_ln19_15_fu_683_p2 & mul_ln19_14_fu_649_p2) & mul_ln19_13_fu_615_p2) & mul_ln19_12_fu_581_p2) & mul_ln19_11_fu_547_p2) & mul_ln19_10_fu_513_p2) & mul_ln19_9_fu_479_p2) & mul_ln19_8_fu_445_p2) & mul_ln19_7_fu_411_p2) & mul_ln19_6_fu_377_p2) & mul_ln19_5_fu_343_p2) & mul_ln19_4_fu_309_p2) & mul_ln19_3_fu_275_p2) & mul_ln19_2_fu_241_p2) & mul_ln19_1_fu_207_p2) & mul_ln19_fu_173_p2);

    fifoC123_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln10_reg_731, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln10_reg_731 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifoC123_write <= ap_const_logic_1;
        else 
            fifoC123_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln10_fu_146_p2 <= "1" when (signed(zext_ln3_fu_142_p1) < signed(readRep)) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_10_fu_349_p4 <= fifoA21_dout(55 downto 48);
    p_Result_11_fu_363_p4 <= fifoB22_dout(55 downto 48);
    p_Result_12_fu_383_p4 <= fifoA21_dout(63 downto 56);
    p_Result_13_fu_397_p4 <= fifoB22_dout(63 downto 56);
    p_Result_14_fu_417_p4 <= fifoA21_dout(71 downto 64);
    p_Result_15_fu_431_p4 <= fifoB22_dout(71 downto 64);
    p_Result_16_fu_451_p4 <= fifoA21_dout(79 downto 72);
    p_Result_17_fu_465_p4 <= fifoB22_dout(79 downto 72);
    p_Result_18_fu_485_p4 <= fifoA21_dout(87 downto 80);
    p_Result_19_fu_499_p4 <= fifoB22_dout(87 downto 80);
    p_Result_1_fu_329_p4 <= fifoB22_dout(47 downto 40);
    p_Result_20_fu_519_p4 <= fifoA21_dout(95 downto 88);
    p_Result_21_fu_533_p4 <= fifoB22_dout(95 downto 88);
    p_Result_22_fu_553_p4 <= fifoA21_dout(103 downto 96);
    p_Result_23_fu_567_p4 <= fifoB22_dout(103 downto 96);
    p_Result_24_fu_587_p4 <= fifoA21_dout(111 downto 104);
    p_Result_25_fu_601_p4 <= fifoB22_dout(111 downto 104);
    p_Result_26_fu_621_p4 <= fifoA21_dout(119 downto 112);
    p_Result_27_fu_635_p4 <= fifoB22_dout(119 downto 112);
    p_Result_28_fu_655_p4 <= fifoA21_dout(127 downto 120);
    p_Result_29_fu_669_p4 <= fifoB22_dout(127 downto 120);
    p_Result_2_fu_281_p4 <= fifoA21_dout(39 downto 32);
    p_Result_3_fu_179_p4 <= fifoA21_dout(15 downto 8);
    p_Result_4_fu_193_p4 <= fifoB22_dout(15 downto 8);
    p_Result_5_fu_295_p4 <= fifoB22_dout(39 downto 32);
    p_Result_6_fu_213_p4 <= fifoA21_dout(23 downto 16);
    p_Result_7_fu_227_p4 <= fifoB22_dout(23 downto 16);
    p_Result_8_fu_315_p4 <= fifoA21_dout(47 downto 40);
    p_Result_9_fu_247_p4 <= fifoA21_dout(31 downto 24);
    p_Result_s_fu_261_p4 <= fifoB22_dout(31 downto 24);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln674_1_fu_165_p1 <= fifoB22_dout(8 - 1 downto 0);
    trunc_ln674_fu_157_p1 <= fifoA21_dout(8 - 1 downto 0);
    zext_ln3_fu_142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_131),32));
end behav;
