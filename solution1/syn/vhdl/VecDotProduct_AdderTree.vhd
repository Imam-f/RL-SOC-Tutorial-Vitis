-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity VecDotProduct_AdderTree is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    fifoC123_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    fifoC123_empty_n : IN STD_LOGIC;
    fifoC123_read : OUT STD_LOGIC;
    fifoC224_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    fifoC224_full_n : IN STD_LOGIC;
    fifoC224_write : OUT STD_LOGIC;
    readRep : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of VecDotProduct_AdderTree is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal fifoC123_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln35_reg_508 : STD_LOGIC_VECTOR (0 downto 0);
    signal fifoC224_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln35_reg_508_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_121 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln35_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln35_fu_141_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal scaC_fu_493_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal scaC_reg_517 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln27_fu_132_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln674_fu_147_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_155_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_31_fu_169_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_32_fu_183_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_33_fu_197_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_34_fu_211_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_35_fu_225_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_36_fu_239_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_37_fu_253_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_38_fu_267_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_39_fu_281_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_40_fu_295_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_41_fu_309_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_42_fu_323_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_43_fu_337_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_44_fu_351_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln674_fu_151_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln31_fu_165_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal temp1_fu_365_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln674_3_fu_193_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln674_1_fu_179_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln49_fu_375_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln43_fu_371_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln49_fu_381_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal temp2_fu_385_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln674_2_fu_207_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln43_1_fu_391_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln674_7_fu_249_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln674_6_fu_235_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln55_1_fu_401_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln674_5_fu_221_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln55_fu_407_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln55_2_fu_411_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln55_fu_395_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln55_1_fu_417_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal temp3_fu_421_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln674_4_fu_263_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln43_2_fu_427_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln674_9_fu_291_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln674_8_fu_277_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln59_1_fu_437_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln59_fu_431_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln59_fu_443_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln674_11_fu_319_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln674_10_fu_305_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln59_3_fu_453_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln32_fu_361_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln674_13_fu_347_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln59_4_fu_463_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln674_12_fu_333_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln59_2_fu_469_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln59_5_fu_473_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln59_1_fu_459_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln59_3_fu_479_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln59_6_fu_483_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln59_2_fu_447_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln59_4_fu_489_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_136_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                i_reg_121 <= add_ln35_fu_141_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_121 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln35_reg_508 <= icmp_ln35_fu_136_p2;
                icmp_ln35_reg_508_pp0_iter1_reg <= icmp_ln35_reg_508;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_reg_508 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                scaC_reg_517 <= scaC_fu_493_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln35_fu_136_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln35_fu_136_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((icmp_ln35_fu_136_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln35_fu_141_p2 <= std_logic_vector(unsigned(i_reg_121) + unsigned(ap_const_lv31_1));
    add_ln49_fu_375_p2 <= std_logic_vector(signed(sext_ln674_3_fu_193_p1) + signed(sext_ln674_1_fu_179_p1));
    add_ln55_1_fu_401_p2 <= std_logic_vector(signed(sext_ln674_7_fu_249_p1) + signed(sext_ln674_6_fu_235_p1));
    add_ln55_2_fu_411_p2 <= std_logic_vector(signed(sext_ln674_5_fu_221_p1) + signed(sext_ln55_fu_407_p1));
    add_ln55_fu_395_p2 <= std_logic_vector(signed(sext_ln674_2_fu_207_p1) + signed(sext_ln43_1_fu_391_p1));
    add_ln59_1_fu_437_p2 <= std_logic_vector(signed(sext_ln674_9_fu_291_p1) + signed(sext_ln674_8_fu_277_p1));
    add_ln59_2_fu_447_p2 <= std_logic_vector(unsigned(add_ln59_fu_431_p2) + unsigned(sext_ln59_fu_443_p1));
    add_ln59_3_fu_453_p2 <= std_logic_vector(signed(sext_ln674_11_fu_319_p1) + signed(sext_ln674_10_fu_305_p1));
    add_ln59_4_fu_463_p2 <= std_logic_vector(signed(sext_ln32_fu_361_p1) + signed(sext_ln674_13_fu_347_p1));
    add_ln59_5_fu_473_p2 <= std_logic_vector(signed(sext_ln674_12_fu_333_p1) + signed(sext_ln59_2_fu_469_p1));
    add_ln59_6_fu_483_p2 <= std_logic_vector(signed(sext_ln59_1_fu_459_p1) + signed(sext_ln59_3_fu_479_p1));
    add_ln59_fu_431_p2 <= std_logic_vector(signed(sext_ln674_4_fu_263_p1) + signed(sext_ln43_2_fu_427_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(fifoC123_empty_n, fifoC224_full_n, ap_enable_reg_pp0_iter1, icmp_ln35_reg_508, ap_enable_reg_pp0_iter2, icmp_ln35_reg_508_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln35_reg_508_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (fifoC224_full_n = ap_const_logic_0)) or ((icmp_ln35_reg_508 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (fifoC123_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(fifoC123_empty_n, fifoC224_full_n, ap_enable_reg_pp0_iter1, icmp_ln35_reg_508, ap_enable_reg_pp0_iter2, icmp_ln35_reg_508_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln35_reg_508_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (fifoC224_full_n = ap_const_logic_0)) or ((icmp_ln35_reg_508 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (fifoC123_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(fifoC123_empty_n, fifoC224_full_n, ap_enable_reg_pp0_iter1, icmp_ln35_reg_508, ap_enable_reg_pp0_iter2, icmp_ln35_reg_508_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln35_reg_508_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (fifoC224_full_n = ap_const_logic_0)) or ((icmp_ln35_reg_508 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (fifoC123_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(fifoC123_empty_n, icmp_ln35_reg_508)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln35_reg_508 = ap_const_lv1_1) and (fifoC123_empty_n = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage0_iter2_assign_proc : process(fifoC224_full_n, icmp_ln35_reg_508_pp0_iter1_reg)
    begin
                ap_block_state4_pp0_stage0_iter2 <= ((icmp_ln35_reg_508_pp0_iter1_reg = ap_const_lv1_1) and (fifoC224_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln35_fu_136_p2)
    begin
        if ((icmp_ln35_fu_136_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    fifoC123_blk_n_assign_proc : process(fifoC123_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln35_reg_508)
    begin
        if (((icmp_ln35_reg_508 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifoC123_blk_n <= fifoC123_empty_n;
        else 
            fifoC123_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifoC123_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln35_reg_508, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln35_reg_508 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifoC123_read <= ap_const_logic_1;
        else 
            fifoC123_read <= ap_const_logic_0;
        end if; 
    end process;


    fifoC224_blk_n_assign_proc : process(fifoC224_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln35_reg_508_pp0_iter1_reg)
    begin
        if (((icmp_ln35_reg_508_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            fifoC224_blk_n <= fifoC224_full_n;
        else 
            fifoC224_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        fifoC224_din <= std_logic_vector(IEEE.numeric_std.resize(signed(scaC_reg_517),32));


    fifoC224_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln35_reg_508_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln35_reg_508_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fifoC224_write <= ap_const_logic_1;
        else 
            fifoC224_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln35_fu_136_p2 <= "1" when (signed(zext_ln27_fu_132_p1) < signed(readRep)) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_31_fu_169_p4 <= fifoC123_dout(47 downto 32);
    p_Result_32_fu_183_p4 <= fifoC123_dout(63 downto 48);
    p_Result_33_fu_197_p4 <= fifoC123_dout(79 downto 64);
    p_Result_34_fu_211_p4 <= fifoC123_dout(95 downto 80);
    p_Result_35_fu_225_p4 <= fifoC123_dout(111 downto 96);
    p_Result_36_fu_239_p4 <= fifoC123_dout(127 downto 112);
    p_Result_37_fu_253_p4 <= fifoC123_dout(143 downto 128);
    p_Result_38_fu_267_p4 <= fifoC123_dout(159 downto 144);
    p_Result_39_fu_281_p4 <= fifoC123_dout(175 downto 160);
    p_Result_40_fu_295_p4 <= fifoC123_dout(191 downto 176);
    p_Result_41_fu_309_p4 <= fifoC123_dout(207 downto 192);
    p_Result_42_fu_323_p4 <= fifoC123_dout(223 downto 208);
    p_Result_43_fu_337_p4 <= fifoC123_dout(239 downto 224);
    p_Result_44_fu_351_p4 <= fifoC123_dout(255 downto 240);
    p_Result_s_fu_155_p4 <= fifoC123_dout(31 downto 16);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    scaC_fu_493_p2 <= std_logic_vector(unsigned(add_ln59_2_fu_447_p2) + unsigned(sext_ln59_4_fu_489_p1));
        sext_ln31_fu_165_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_s_fu_155_p4),17));

        sext_ln32_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_44_fu_351_p4),17));

        sext_ln43_1_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp2_fu_385_p2),19));

        sext_ln43_2_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp3_fu_421_p2),20));

        sext_ln43_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp1_fu_365_p2),18));

        sext_ln49_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln49_fu_375_p2),18));

        sext_ln55_1_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln55_2_fu_411_p2),19));

        sext_ln55_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln55_1_fu_401_p2),18));

        sext_ln59_1_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln59_3_fu_453_p2),19));

        sext_ln59_2_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln59_4_fu_463_p2),18));

        sext_ln59_3_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln59_5_fu_473_p2),19));

        sext_ln59_4_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln59_6_fu_483_p2),20));

        sext_ln59_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln59_1_fu_437_p2),20));

        sext_ln674_10_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_40_fu_295_p4),17));

        sext_ln674_11_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_41_fu_309_p4),17));

        sext_ln674_12_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_42_fu_323_p4),18));

        sext_ln674_13_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_43_fu_337_p4),17));

        sext_ln674_1_fu_179_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_31_fu_169_p4),17));

        sext_ln674_2_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_33_fu_197_p4),19));

        sext_ln674_3_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_32_fu_183_p4),17));

        sext_ln674_4_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_37_fu_253_p4),20));

        sext_ln674_5_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_34_fu_211_p4),18));

        sext_ln674_6_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_35_fu_225_p4),17));

        sext_ln674_7_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_36_fu_239_p4),17));

        sext_ln674_8_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_38_fu_267_p4),17));

        sext_ln674_9_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_39_fu_281_p4),17));

        sext_ln674_fu_151_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln674_fu_147_p1),17));

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    temp1_fu_365_p2 <= std_logic_vector(signed(sext_ln674_fu_151_p1) + signed(sext_ln31_fu_165_p1));
    temp2_fu_385_p2 <= std_logic_vector(signed(sext_ln43_fu_371_p1) + signed(sext_ln49_fu_381_p1));
    temp3_fu_421_p2 <= std_logic_vector(unsigned(add_ln55_fu_395_p2) + unsigned(sext_ln55_1_fu_417_p1));
    trunc_ln674_fu_147_p1 <= fifoC123_dout(16 - 1 downto 0);
    zext_ln27_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_121),32));
end behav;
