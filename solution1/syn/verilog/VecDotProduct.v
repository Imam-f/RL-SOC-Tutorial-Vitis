// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="VecDotProduct_VecDotProduct,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=34,HLS_SYN_DSP=0,HLS_SYN_FF=3726,HLS_SYN_LUT=5322,HLS_VERSION=2020_1}" *)

module VecDotProduct (
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        ap_clk,
        ap_rst_n,
        s_axi_control_r_AWVALID,
        s_axi_control_r_AWREADY,
        s_axi_control_r_AWADDR,
        s_axi_control_r_WVALID,
        s_axi_control_r_WREADY,
        s_axi_control_r_WDATA,
        s_axi_control_r_WSTRB,
        s_axi_control_r_ARVALID,
        s_axi_control_r_ARREADY,
        s_axi_control_r_ARADDR,
        s_axi_control_r_RVALID,
        s_axi_control_r_RREADY,
        s_axi_control_r_RDATA,
        s_axi_control_r_RRESP,
        s_axi_control_r_BVALID,
        s_axi_control_r_BREADY,
        s_axi_control_r_BRESP,
        interrupt,
        m_axi_ddr0_AWVALID,
        m_axi_ddr0_AWREADY,
        m_axi_ddr0_AWADDR,
        m_axi_ddr0_AWID,
        m_axi_ddr0_AWLEN,
        m_axi_ddr0_AWSIZE,
        m_axi_ddr0_AWBURST,
        m_axi_ddr0_AWLOCK,
        m_axi_ddr0_AWCACHE,
        m_axi_ddr0_AWPROT,
        m_axi_ddr0_AWQOS,
        m_axi_ddr0_AWREGION,
        m_axi_ddr0_AWUSER,
        m_axi_ddr0_WVALID,
        m_axi_ddr0_WREADY,
        m_axi_ddr0_WDATA,
        m_axi_ddr0_WSTRB,
        m_axi_ddr0_WLAST,
        m_axi_ddr0_WID,
        m_axi_ddr0_WUSER,
        m_axi_ddr0_ARVALID,
        m_axi_ddr0_ARREADY,
        m_axi_ddr0_ARADDR,
        m_axi_ddr0_ARID,
        m_axi_ddr0_ARLEN,
        m_axi_ddr0_ARSIZE,
        m_axi_ddr0_ARBURST,
        m_axi_ddr0_ARLOCK,
        m_axi_ddr0_ARCACHE,
        m_axi_ddr0_ARPROT,
        m_axi_ddr0_ARQOS,
        m_axi_ddr0_ARREGION,
        m_axi_ddr0_ARUSER,
        m_axi_ddr0_RVALID,
        m_axi_ddr0_RREADY,
        m_axi_ddr0_RDATA,
        m_axi_ddr0_RLAST,
        m_axi_ddr0_RID,
        m_axi_ddr0_RUSER,
        m_axi_ddr0_RRESP,
        m_axi_ddr0_BVALID,
        m_axi_ddr0_BREADY,
        m_axi_ddr0_BRESP,
        m_axi_ddr0_BID,
        m_axi_ddr0_BUSER,
        m_axi_ddr1_AWVALID,
        m_axi_ddr1_AWREADY,
        m_axi_ddr1_AWADDR,
        m_axi_ddr1_AWID,
        m_axi_ddr1_AWLEN,
        m_axi_ddr1_AWSIZE,
        m_axi_ddr1_AWBURST,
        m_axi_ddr1_AWLOCK,
        m_axi_ddr1_AWCACHE,
        m_axi_ddr1_AWPROT,
        m_axi_ddr1_AWQOS,
        m_axi_ddr1_AWREGION,
        m_axi_ddr1_AWUSER,
        m_axi_ddr1_WVALID,
        m_axi_ddr1_WREADY,
        m_axi_ddr1_WDATA,
        m_axi_ddr1_WSTRB,
        m_axi_ddr1_WLAST,
        m_axi_ddr1_WID,
        m_axi_ddr1_WUSER,
        m_axi_ddr1_ARVALID,
        m_axi_ddr1_ARREADY,
        m_axi_ddr1_ARADDR,
        m_axi_ddr1_ARID,
        m_axi_ddr1_ARLEN,
        m_axi_ddr1_ARSIZE,
        m_axi_ddr1_ARBURST,
        m_axi_ddr1_ARLOCK,
        m_axi_ddr1_ARCACHE,
        m_axi_ddr1_ARPROT,
        m_axi_ddr1_ARQOS,
        m_axi_ddr1_ARREGION,
        m_axi_ddr1_ARUSER,
        m_axi_ddr1_RVALID,
        m_axi_ddr1_RREADY,
        m_axi_ddr1_RDATA,
        m_axi_ddr1_RLAST,
        m_axi_ddr1_RID,
        m_axi_ddr1_RUSER,
        m_axi_ddr1_RRESP,
        m_axi_ddr1_BVALID,
        m_axi_ddr1_BREADY,
        m_axi_ddr1_BRESP,
        m_axi_ddr1_BID,
        m_axi_ddr1_BUSER,
        m_axi_ddr2_AWVALID,
        m_axi_ddr2_AWREADY,
        m_axi_ddr2_AWADDR,
        m_axi_ddr2_AWID,
        m_axi_ddr2_AWLEN,
        m_axi_ddr2_AWSIZE,
        m_axi_ddr2_AWBURST,
        m_axi_ddr2_AWLOCK,
        m_axi_ddr2_AWCACHE,
        m_axi_ddr2_AWPROT,
        m_axi_ddr2_AWQOS,
        m_axi_ddr2_AWREGION,
        m_axi_ddr2_AWUSER,
        m_axi_ddr2_WVALID,
        m_axi_ddr2_WREADY,
        m_axi_ddr2_WDATA,
        m_axi_ddr2_WSTRB,
        m_axi_ddr2_WLAST,
        m_axi_ddr2_WID,
        m_axi_ddr2_WUSER,
        m_axi_ddr2_ARVALID,
        m_axi_ddr2_ARREADY,
        m_axi_ddr2_ARADDR,
        m_axi_ddr2_ARID,
        m_axi_ddr2_ARLEN,
        m_axi_ddr2_ARSIZE,
        m_axi_ddr2_ARBURST,
        m_axi_ddr2_ARLOCK,
        m_axi_ddr2_ARCACHE,
        m_axi_ddr2_ARPROT,
        m_axi_ddr2_ARQOS,
        m_axi_ddr2_ARREGION,
        m_axi_ddr2_ARUSER,
        m_axi_ddr2_RVALID,
        m_axi_ddr2_RREADY,
        m_axi_ddr2_RDATA,
        m_axi_ddr2_RLAST,
        m_axi_ddr2_RID,
        m_axi_ddr2_RUSER,
        m_axi_ddr2_RRESP,
        m_axi_ddr2_BVALID,
        m_axi_ddr2_BREADY,
        m_axi_ddr2_BRESP,
        m_axi_ddr2_BID,
        m_axi_ddr2_BUSER
);

parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_ADDR_WIDTH = 32;
parameter    C_S_AXI_CONTROL_R_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_R_ADDR_WIDTH = 6;
parameter    C_M_AXI_DDR0_ID_WIDTH = 1;
parameter    C_M_AXI_DDR0_ADDR_WIDTH = 32;
parameter    C_M_AXI_DDR0_DATA_WIDTH = 128;
parameter    C_M_AXI_DDR0_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DDR0_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DDR0_WUSER_WIDTH = 1;
parameter    C_M_AXI_DDR0_RUSER_WIDTH = 1;
parameter    C_M_AXI_DDR0_BUSER_WIDTH = 1;
parameter    C_M_AXI_DDR0_USER_VALUE = 0;
parameter    C_M_AXI_DDR0_PROT_VALUE = 0;
parameter    C_M_AXI_DDR0_CACHE_VALUE = 3;
parameter    C_M_AXI_ID_WIDTH = 1;
parameter    C_M_AXI_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_AWUSER_WIDTH = 1;
parameter    C_M_AXI_ARUSER_WIDTH = 1;
parameter    C_M_AXI_WUSER_WIDTH = 1;
parameter    C_M_AXI_RUSER_WIDTH = 1;
parameter    C_M_AXI_BUSER_WIDTH = 1;
parameter    C_M_AXI_DDR1_ID_WIDTH = 1;
parameter    C_M_AXI_DDR1_ADDR_WIDTH = 32;
parameter    C_M_AXI_DDR1_DATA_WIDTH = 128;
parameter    C_M_AXI_DDR1_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DDR1_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DDR1_WUSER_WIDTH = 1;
parameter    C_M_AXI_DDR1_RUSER_WIDTH = 1;
parameter    C_M_AXI_DDR1_BUSER_WIDTH = 1;
parameter    C_M_AXI_DDR1_USER_VALUE = 0;
parameter    C_M_AXI_DDR1_PROT_VALUE = 0;
parameter    C_M_AXI_DDR1_CACHE_VALUE = 3;
parameter    C_M_AXI_DDR2_ID_WIDTH = 1;
parameter    C_M_AXI_DDR2_ADDR_WIDTH = 32;
parameter    C_M_AXI_DDR2_DATA_WIDTH = 32;
parameter    C_M_AXI_DDR2_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DDR2_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DDR2_WUSER_WIDTH = 1;
parameter    C_M_AXI_DDR2_RUSER_WIDTH = 1;
parameter    C_M_AXI_DDR2_BUSER_WIDTH = 1;
parameter    C_M_AXI_DDR2_USER_VALUE = 0;
parameter    C_M_AXI_DDR2_PROT_VALUE = 0;
parameter    C_M_AXI_DDR2_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_CONTROL_R_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DDR0_WSTRB_WIDTH = (128 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DDR1_WSTRB_WIDTH = (128 / 8);
parameter C_M_AXI_DDR2_WSTRB_WIDTH = (32 / 8);

input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
input   ap_clk;
input   ap_rst_n;
input   s_axi_control_r_AWVALID;
output   s_axi_control_r_AWREADY;
input  [C_S_AXI_CONTROL_R_ADDR_WIDTH - 1:0] s_axi_control_r_AWADDR;
input   s_axi_control_r_WVALID;
output   s_axi_control_r_WREADY;
input  [C_S_AXI_CONTROL_R_DATA_WIDTH - 1:0] s_axi_control_r_WDATA;
input  [C_S_AXI_CONTROL_R_WSTRB_WIDTH - 1:0] s_axi_control_r_WSTRB;
input   s_axi_control_r_ARVALID;
output   s_axi_control_r_ARREADY;
input  [C_S_AXI_CONTROL_R_ADDR_WIDTH - 1:0] s_axi_control_r_ARADDR;
output   s_axi_control_r_RVALID;
input   s_axi_control_r_RREADY;
output  [C_S_AXI_CONTROL_R_DATA_WIDTH - 1:0] s_axi_control_r_RDATA;
output  [1:0] s_axi_control_r_RRESP;
output   s_axi_control_r_BVALID;
input   s_axi_control_r_BREADY;
output  [1:0] s_axi_control_r_BRESP;
output   interrupt;
output   m_axi_ddr0_AWVALID;
input   m_axi_ddr0_AWREADY;
output  [C_M_AXI_DDR0_ADDR_WIDTH - 1:0] m_axi_ddr0_AWADDR;
output  [C_M_AXI_DDR0_ID_WIDTH - 1:0] m_axi_ddr0_AWID;
output  [7:0] m_axi_ddr0_AWLEN;
output  [2:0] m_axi_ddr0_AWSIZE;
output  [1:0] m_axi_ddr0_AWBURST;
output  [1:0] m_axi_ddr0_AWLOCK;
output  [3:0] m_axi_ddr0_AWCACHE;
output  [2:0] m_axi_ddr0_AWPROT;
output  [3:0] m_axi_ddr0_AWQOS;
output  [3:0] m_axi_ddr0_AWREGION;
output  [C_M_AXI_DDR0_AWUSER_WIDTH - 1:0] m_axi_ddr0_AWUSER;
output   m_axi_ddr0_WVALID;
input   m_axi_ddr0_WREADY;
output  [C_M_AXI_DDR0_DATA_WIDTH - 1:0] m_axi_ddr0_WDATA;
output  [C_M_AXI_DDR0_WSTRB_WIDTH - 1:0] m_axi_ddr0_WSTRB;
output   m_axi_ddr0_WLAST;
output  [C_M_AXI_DDR0_ID_WIDTH - 1:0] m_axi_ddr0_WID;
output  [C_M_AXI_DDR0_WUSER_WIDTH - 1:0] m_axi_ddr0_WUSER;
output   m_axi_ddr0_ARVALID;
input   m_axi_ddr0_ARREADY;
output  [C_M_AXI_DDR0_ADDR_WIDTH - 1:0] m_axi_ddr0_ARADDR;
output  [C_M_AXI_DDR0_ID_WIDTH - 1:0] m_axi_ddr0_ARID;
output  [7:0] m_axi_ddr0_ARLEN;
output  [2:0] m_axi_ddr0_ARSIZE;
output  [1:0] m_axi_ddr0_ARBURST;
output  [1:0] m_axi_ddr0_ARLOCK;
output  [3:0] m_axi_ddr0_ARCACHE;
output  [2:0] m_axi_ddr0_ARPROT;
output  [3:0] m_axi_ddr0_ARQOS;
output  [3:0] m_axi_ddr0_ARREGION;
output  [C_M_AXI_DDR0_ARUSER_WIDTH - 1:0] m_axi_ddr0_ARUSER;
input   m_axi_ddr0_RVALID;
output   m_axi_ddr0_RREADY;
input  [C_M_AXI_DDR0_DATA_WIDTH - 1:0] m_axi_ddr0_RDATA;
input   m_axi_ddr0_RLAST;
input  [C_M_AXI_DDR0_ID_WIDTH - 1:0] m_axi_ddr0_RID;
input  [C_M_AXI_DDR0_RUSER_WIDTH - 1:0] m_axi_ddr0_RUSER;
input  [1:0] m_axi_ddr0_RRESP;
input   m_axi_ddr0_BVALID;
output   m_axi_ddr0_BREADY;
input  [1:0] m_axi_ddr0_BRESP;
input  [C_M_AXI_DDR0_ID_WIDTH - 1:0] m_axi_ddr0_BID;
input  [C_M_AXI_DDR0_BUSER_WIDTH - 1:0] m_axi_ddr0_BUSER;
output   m_axi_ddr1_AWVALID;
input   m_axi_ddr1_AWREADY;
output  [C_M_AXI_DDR1_ADDR_WIDTH - 1:0] m_axi_ddr1_AWADDR;
output  [C_M_AXI_DDR1_ID_WIDTH - 1:0] m_axi_ddr1_AWID;
output  [7:0] m_axi_ddr1_AWLEN;
output  [2:0] m_axi_ddr1_AWSIZE;
output  [1:0] m_axi_ddr1_AWBURST;
output  [1:0] m_axi_ddr1_AWLOCK;
output  [3:0] m_axi_ddr1_AWCACHE;
output  [2:0] m_axi_ddr1_AWPROT;
output  [3:0] m_axi_ddr1_AWQOS;
output  [3:0] m_axi_ddr1_AWREGION;
output  [C_M_AXI_DDR1_AWUSER_WIDTH - 1:0] m_axi_ddr1_AWUSER;
output   m_axi_ddr1_WVALID;
input   m_axi_ddr1_WREADY;
output  [C_M_AXI_DDR1_DATA_WIDTH - 1:0] m_axi_ddr1_WDATA;
output  [C_M_AXI_DDR1_WSTRB_WIDTH - 1:0] m_axi_ddr1_WSTRB;
output   m_axi_ddr1_WLAST;
output  [C_M_AXI_DDR1_ID_WIDTH - 1:0] m_axi_ddr1_WID;
output  [C_M_AXI_DDR1_WUSER_WIDTH - 1:0] m_axi_ddr1_WUSER;
output   m_axi_ddr1_ARVALID;
input   m_axi_ddr1_ARREADY;
output  [C_M_AXI_DDR1_ADDR_WIDTH - 1:0] m_axi_ddr1_ARADDR;
output  [C_M_AXI_DDR1_ID_WIDTH - 1:0] m_axi_ddr1_ARID;
output  [7:0] m_axi_ddr1_ARLEN;
output  [2:0] m_axi_ddr1_ARSIZE;
output  [1:0] m_axi_ddr1_ARBURST;
output  [1:0] m_axi_ddr1_ARLOCK;
output  [3:0] m_axi_ddr1_ARCACHE;
output  [2:0] m_axi_ddr1_ARPROT;
output  [3:0] m_axi_ddr1_ARQOS;
output  [3:0] m_axi_ddr1_ARREGION;
output  [C_M_AXI_DDR1_ARUSER_WIDTH - 1:0] m_axi_ddr1_ARUSER;
input   m_axi_ddr1_RVALID;
output   m_axi_ddr1_RREADY;
input  [C_M_AXI_DDR1_DATA_WIDTH - 1:0] m_axi_ddr1_RDATA;
input   m_axi_ddr1_RLAST;
input  [C_M_AXI_DDR1_ID_WIDTH - 1:0] m_axi_ddr1_RID;
input  [C_M_AXI_DDR1_RUSER_WIDTH - 1:0] m_axi_ddr1_RUSER;
input  [1:0] m_axi_ddr1_RRESP;
input   m_axi_ddr1_BVALID;
output   m_axi_ddr1_BREADY;
input  [1:0] m_axi_ddr1_BRESP;
input  [C_M_AXI_DDR1_ID_WIDTH - 1:0] m_axi_ddr1_BID;
input  [C_M_AXI_DDR1_BUSER_WIDTH - 1:0] m_axi_ddr1_BUSER;
output   m_axi_ddr2_AWVALID;
input   m_axi_ddr2_AWREADY;
output  [C_M_AXI_DDR2_ADDR_WIDTH - 1:0] m_axi_ddr2_AWADDR;
output  [C_M_AXI_DDR2_ID_WIDTH - 1:0] m_axi_ddr2_AWID;
output  [7:0] m_axi_ddr2_AWLEN;
output  [2:0] m_axi_ddr2_AWSIZE;
output  [1:0] m_axi_ddr2_AWBURST;
output  [1:0] m_axi_ddr2_AWLOCK;
output  [3:0] m_axi_ddr2_AWCACHE;
output  [2:0] m_axi_ddr2_AWPROT;
output  [3:0] m_axi_ddr2_AWQOS;
output  [3:0] m_axi_ddr2_AWREGION;
output  [C_M_AXI_DDR2_AWUSER_WIDTH - 1:0] m_axi_ddr2_AWUSER;
output   m_axi_ddr2_WVALID;
input   m_axi_ddr2_WREADY;
output  [C_M_AXI_DDR2_DATA_WIDTH - 1:0] m_axi_ddr2_WDATA;
output  [C_M_AXI_DDR2_WSTRB_WIDTH - 1:0] m_axi_ddr2_WSTRB;
output   m_axi_ddr2_WLAST;
output  [C_M_AXI_DDR2_ID_WIDTH - 1:0] m_axi_ddr2_WID;
output  [C_M_AXI_DDR2_WUSER_WIDTH - 1:0] m_axi_ddr2_WUSER;
output   m_axi_ddr2_ARVALID;
input   m_axi_ddr2_ARREADY;
output  [C_M_AXI_DDR2_ADDR_WIDTH - 1:0] m_axi_ddr2_ARADDR;
output  [C_M_AXI_DDR2_ID_WIDTH - 1:0] m_axi_ddr2_ARID;
output  [7:0] m_axi_ddr2_ARLEN;
output  [2:0] m_axi_ddr2_ARSIZE;
output  [1:0] m_axi_ddr2_ARBURST;
output  [1:0] m_axi_ddr2_ARLOCK;
output  [3:0] m_axi_ddr2_ARCACHE;
output  [2:0] m_axi_ddr2_ARPROT;
output  [3:0] m_axi_ddr2_ARQOS;
output  [3:0] m_axi_ddr2_ARREGION;
output  [C_M_AXI_DDR2_ARUSER_WIDTH - 1:0] m_axi_ddr2_ARUSER;
input   m_axi_ddr2_RVALID;
output   m_axi_ddr2_RREADY;
input  [C_M_AXI_DDR2_DATA_WIDTH - 1:0] m_axi_ddr2_RDATA;
input   m_axi_ddr2_RLAST;
input  [C_M_AXI_DDR2_ID_WIDTH - 1:0] m_axi_ddr2_RID;
input  [C_M_AXI_DDR2_RUSER_WIDTH - 1:0] m_axi_ddr2_RUSER;
input  [1:0] m_axi_ddr2_RRESP;
input   m_axi_ddr2_BVALID;
output   m_axi_ddr2_BREADY;
input  [1:0] m_axi_ddr2_BRESP;
input  [C_M_AXI_DDR2_ID_WIDTH - 1:0] m_axi_ddr2_BID;
input  [C_M_AXI_DDR2_BUSER_WIDTH - 1:0] m_axi_ddr2_BUSER;

 reg    ap_rst_n_inv;
wire   [31:0] readRep;
wire   [63:0] vecA;
wire   [63:0] vecB;
wire   [63:0] scaC;
wire    ap_start;
wire    ap_ready;
wire    ap_done;
wire    ap_idle;
wire    ddr0_AWREADY;
wire    ddr0_WREADY;
wire    ddr0_ARREADY;
wire    ddr0_RVALID;
wire   [127:0] ddr0_RDATA;
wire    ddr0_RLAST;
wire   [0:0] ddr0_RID;
wire   [0:0] ddr0_RUSER;
wire   [1:0] ddr0_RRESP;
wire    ddr0_BVALID;
wire   [1:0] ddr0_BRESP;
wire   [0:0] ddr0_BID;
wire   [0:0] ddr0_BUSER;
wire    ddr1_AWREADY;
wire    ddr1_WREADY;
wire    ddr1_ARREADY;
wire    ddr1_RVALID;
wire   [127:0] ddr1_RDATA;
wire    ddr1_RLAST;
wire   [0:0] ddr1_RID;
wire   [0:0] ddr1_RUSER;
wire   [1:0] ddr1_RRESP;
wire    ddr1_BVALID;
wire   [1:0] ddr1_BRESP;
wire   [0:0] ddr1_BID;
wire   [0:0] ddr1_BUSER;
wire    ddr2_AWREADY;
wire    ddr2_WREADY;
wire    ddr2_ARREADY;
wire    ddr2_RVALID;
wire   [31:0] ddr2_RDATA;
wire    ddr2_RLAST;
wire   [0:0] ddr2_RID;
wire   [0:0] ddr2_RUSER;
wire   [1:0] ddr2_RRESP;
wire    ddr2_BVALID;
wire   [1:0] ddr2_BRESP;
wire   [0:0] ddr2_BID;
wire   [0:0] ddr2_BUSER;
wire    VecDotProduct_entry43_U0_ap_start;
wire    VecDotProduct_entry43_U0_ap_done;
wire    VecDotProduct_entry43_U0_ap_continue;
wire    VecDotProduct_entry43_U0_ap_idle;
wire    VecDotProduct_entry43_U0_ap_ready;
wire    VecDotProduct_entry43_U0_start_out;
wire    VecDotProduct_entry43_U0_start_write;
wire   [63:0] VecDotProduct_entry43_U0_vecA_out_din;
wire    VecDotProduct_entry43_U0_vecA_out_write;
wire   [63:0] VecDotProduct_entry43_U0_vecB_out_din;
wire    VecDotProduct_entry43_U0_vecB_out_write;
wire   [63:0] VecDotProduct_entry43_U0_scaC_out_din;
wire    VecDotProduct_entry43_U0_scaC_out_write;
wire    VecReader_U0_ap_start;
wire    VecReader_U0_ap_done;
wire    VecReader_U0_ap_continue;
wire    VecReader_U0_ap_idle;
wire    VecReader_U0_ap_ready;
wire    VecReader_U0_start_out;
wire    VecReader_U0_start_write;
wire    VecReader_U0_m_axi_ddr0_AWVALID;
wire   [31:0] VecReader_U0_m_axi_ddr0_AWADDR;
wire   [0:0] VecReader_U0_m_axi_ddr0_AWID;
wire   [31:0] VecReader_U0_m_axi_ddr0_AWLEN;
wire   [2:0] VecReader_U0_m_axi_ddr0_AWSIZE;
wire   [1:0] VecReader_U0_m_axi_ddr0_AWBURST;
wire   [1:0] VecReader_U0_m_axi_ddr0_AWLOCK;
wire   [3:0] VecReader_U0_m_axi_ddr0_AWCACHE;
wire   [2:0] VecReader_U0_m_axi_ddr0_AWPROT;
wire   [3:0] VecReader_U0_m_axi_ddr0_AWQOS;
wire   [3:0] VecReader_U0_m_axi_ddr0_AWREGION;
wire   [0:0] VecReader_U0_m_axi_ddr0_AWUSER;
wire    VecReader_U0_m_axi_ddr0_WVALID;
wire   [127:0] VecReader_U0_m_axi_ddr0_WDATA;
wire   [15:0] VecReader_U0_m_axi_ddr0_WSTRB;
wire    VecReader_U0_m_axi_ddr0_WLAST;
wire   [0:0] VecReader_U0_m_axi_ddr0_WID;
wire   [0:0] VecReader_U0_m_axi_ddr0_WUSER;
wire    VecReader_U0_m_axi_ddr0_ARVALID;
wire   [31:0] VecReader_U0_m_axi_ddr0_ARADDR;
wire   [0:0] VecReader_U0_m_axi_ddr0_ARID;
wire   [31:0] VecReader_U0_m_axi_ddr0_ARLEN;
wire   [2:0] VecReader_U0_m_axi_ddr0_ARSIZE;
wire   [1:0] VecReader_U0_m_axi_ddr0_ARBURST;
wire   [1:0] VecReader_U0_m_axi_ddr0_ARLOCK;
wire   [3:0] VecReader_U0_m_axi_ddr0_ARCACHE;
wire   [2:0] VecReader_U0_m_axi_ddr0_ARPROT;
wire   [3:0] VecReader_U0_m_axi_ddr0_ARQOS;
wire   [3:0] VecReader_U0_m_axi_ddr0_ARREGION;
wire   [0:0] VecReader_U0_m_axi_ddr0_ARUSER;
wire    VecReader_U0_m_axi_ddr0_RREADY;
wire    VecReader_U0_m_axi_ddr0_BREADY;
wire   [127:0] VecReader_U0_fifoA21_din;
wire    VecReader_U0_fifoA21_write;
wire    VecReader_U0_ddr_read;
wire    VecReader1_U0_ap_start;
wire    VecReader1_U0_ap_done;
wire    VecReader1_U0_ap_continue;
wire    VecReader1_U0_ap_idle;
wire    VecReader1_U0_ap_ready;
wire    VecReader1_U0_m_axi_ddr0_AWVALID;
wire   [31:0] VecReader1_U0_m_axi_ddr0_AWADDR;
wire   [0:0] VecReader1_U0_m_axi_ddr0_AWID;
wire   [31:0] VecReader1_U0_m_axi_ddr0_AWLEN;
wire   [2:0] VecReader1_U0_m_axi_ddr0_AWSIZE;
wire   [1:0] VecReader1_U0_m_axi_ddr0_AWBURST;
wire   [1:0] VecReader1_U0_m_axi_ddr0_AWLOCK;
wire   [3:0] VecReader1_U0_m_axi_ddr0_AWCACHE;
wire   [2:0] VecReader1_U0_m_axi_ddr0_AWPROT;
wire   [3:0] VecReader1_U0_m_axi_ddr0_AWQOS;
wire   [3:0] VecReader1_U0_m_axi_ddr0_AWREGION;
wire   [0:0] VecReader1_U0_m_axi_ddr0_AWUSER;
wire    VecReader1_U0_m_axi_ddr0_WVALID;
wire   [127:0] VecReader1_U0_m_axi_ddr0_WDATA;
wire   [15:0] VecReader1_U0_m_axi_ddr0_WSTRB;
wire    VecReader1_U0_m_axi_ddr0_WLAST;
wire   [0:0] VecReader1_U0_m_axi_ddr0_WID;
wire   [0:0] VecReader1_U0_m_axi_ddr0_WUSER;
wire    VecReader1_U0_m_axi_ddr0_ARVALID;
wire   [31:0] VecReader1_U0_m_axi_ddr0_ARADDR;
wire   [0:0] VecReader1_U0_m_axi_ddr0_ARID;
wire   [31:0] VecReader1_U0_m_axi_ddr0_ARLEN;
wire   [2:0] VecReader1_U0_m_axi_ddr0_ARSIZE;
wire   [1:0] VecReader1_U0_m_axi_ddr0_ARBURST;
wire   [1:0] VecReader1_U0_m_axi_ddr0_ARLOCK;
wire   [3:0] VecReader1_U0_m_axi_ddr0_ARCACHE;
wire   [2:0] VecReader1_U0_m_axi_ddr0_ARPROT;
wire   [3:0] VecReader1_U0_m_axi_ddr0_ARQOS;
wire   [3:0] VecReader1_U0_m_axi_ddr0_ARREGION;
wire   [0:0] VecReader1_U0_m_axi_ddr0_ARUSER;
wire    VecReader1_U0_m_axi_ddr0_RREADY;
wire    VecReader1_U0_m_axi_ddr0_BREADY;
wire   [127:0] VecReader1_U0_fifoA21_din;
wire    VecReader1_U0_fifoA21_write;
wire    VecReader1_U0_ddr_read;
wire    EWiseMultipiler_U0_ap_start;
wire    EWiseMultipiler_U0_ap_done;
wire    EWiseMultipiler_U0_ap_continue;
wire    EWiseMultipiler_U0_ap_idle;
wire    EWiseMultipiler_U0_ap_ready;
wire    EWiseMultipiler_U0_start_out;
wire    EWiseMultipiler_U0_start_write;
wire    EWiseMultipiler_U0_fifoA21_read;
wire    EWiseMultipiler_U0_fifoB22_read;
wire   [255:0] EWiseMultipiler_U0_fifoC123_din;
wire    EWiseMultipiler_U0_fifoC123_write;
wire    AdderTree_U0_ap_start;
wire    AdderTree_U0_ap_done;
wire    AdderTree_U0_ap_continue;
wire    AdderTree_U0_ap_idle;
wire    AdderTree_U0_ap_ready;
wire    AdderTree_U0_start_out;
wire    AdderTree_U0_start_write;
wire    AdderTree_U0_fifoC123_read;
wire   [31:0] AdderTree_U0_fifoC224_din;
wire    AdderTree_U0_fifoC224_write;
wire    Accumulator_U0_ap_start;
wire    Accumulator_U0_ap_done;
wire    Accumulator_U0_ap_continue;
wire    Accumulator_U0_ap_idle;
wire    Accumulator_U0_ap_ready;
wire    Accumulator_U0_fifoC224_read;
wire   [31:0] Accumulator_U0_fifoC325_din;
wire    Accumulator_U0_fifoC325_write;
wire    ScaWriter_U0_ap_start;
wire    ScaWriter_U0_ap_done;
wire    ScaWriter_U0_ap_continue;
wire    ScaWriter_U0_ap_idle;
wire    ScaWriter_U0_ap_ready;
wire    ScaWriter_U0_fifoC325_read;
wire    ScaWriter_U0_m_axi_ddr2_AWVALID;
wire   [31:0] ScaWriter_U0_m_axi_ddr2_AWADDR;
wire   [0:0] ScaWriter_U0_m_axi_ddr2_AWID;
wire   [31:0] ScaWriter_U0_m_axi_ddr2_AWLEN;
wire   [2:0] ScaWriter_U0_m_axi_ddr2_AWSIZE;
wire   [1:0] ScaWriter_U0_m_axi_ddr2_AWBURST;
wire   [1:0] ScaWriter_U0_m_axi_ddr2_AWLOCK;
wire   [3:0] ScaWriter_U0_m_axi_ddr2_AWCACHE;
wire   [2:0] ScaWriter_U0_m_axi_ddr2_AWPROT;
wire   [3:0] ScaWriter_U0_m_axi_ddr2_AWQOS;
wire   [3:0] ScaWriter_U0_m_axi_ddr2_AWREGION;
wire   [0:0] ScaWriter_U0_m_axi_ddr2_AWUSER;
wire    ScaWriter_U0_m_axi_ddr2_WVALID;
wire   [31:0] ScaWriter_U0_m_axi_ddr2_WDATA;
wire   [3:0] ScaWriter_U0_m_axi_ddr2_WSTRB;
wire    ScaWriter_U0_m_axi_ddr2_WLAST;
wire   [0:0] ScaWriter_U0_m_axi_ddr2_WID;
wire   [0:0] ScaWriter_U0_m_axi_ddr2_WUSER;
wire    ScaWriter_U0_m_axi_ddr2_ARVALID;
wire   [31:0] ScaWriter_U0_m_axi_ddr2_ARADDR;
wire   [0:0] ScaWriter_U0_m_axi_ddr2_ARID;
wire   [31:0] ScaWriter_U0_m_axi_ddr2_ARLEN;
wire   [2:0] ScaWriter_U0_m_axi_ddr2_ARSIZE;
wire   [1:0] ScaWriter_U0_m_axi_ddr2_ARBURST;
wire   [1:0] ScaWriter_U0_m_axi_ddr2_ARLOCK;
wire   [3:0] ScaWriter_U0_m_axi_ddr2_ARCACHE;
wire   [2:0] ScaWriter_U0_m_axi_ddr2_ARPROT;
wire   [3:0] ScaWriter_U0_m_axi_ddr2_ARQOS;
wire   [3:0] ScaWriter_U0_m_axi_ddr2_ARREGION;
wire   [0:0] ScaWriter_U0_m_axi_ddr2_ARUSER;
wire    ScaWriter_U0_m_axi_ddr2_RREADY;
wire    ScaWriter_U0_m_axi_ddr2_BREADY;
wire    ScaWriter_U0_ddr_read;
wire    ap_sync_continue;
wire    vecA_c_full_n;
wire   [63:0] vecA_c_dout;
wire    vecA_c_empty_n;
wire    vecB_c_full_n;
wire   [63:0] vecB_c_dout;
wire    vecB_c_empty_n;
wire    scaC_c_full_n;
wire   [63:0] scaC_c_dout;
wire    scaC_c_empty_n;
wire    fifoA_stream_s_full_n;
wire   [127:0] fifoA_stream_s_dout;
wire    fifoA_stream_s_empty_n;
wire    fifoB_stream_s_full_n;
wire   [127:0] fifoB_stream_s_dout;
wire    fifoB_stream_s_empty_n;
wire    fifoC1_stream_s_full_n;
wire   [255:0] fifoC1_stream_s_dout;
wire    fifoC1_stream_s_empty_n;
wire    fifoC2_stream_s_full_n;
wire   [31:0] fifoC2_stream_s_dout;
wire    fifoC2_stream_s_empty_n;
wire    fifoC3_stream_s_full_n;
wire   [31:0] fifoC3_stream_s_dout;
wire    fifoC3_stream_s_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
reg    ap_sync_reg_VecDotProduct_entry43_U0_ap_ready;
wire    ap_sync_VecDotProduct_entry43_U0_ap_ready;
reg   [1:0] VecDotProduct_entry43_U0_ap_ready_count;
reg    ap_sync_reg_VecReader_U0_ap_ready;
wire    ap_sync_VecReader_U0_ap_ready;
reg   [1:0] VecReader_U0_ap_ready_count;
reg    ap_sync_reg_VecReader1_U0_ap_ready;
wire    ap_sync_VecReader1_U0_ap_ready;
reg   [1:0] VecReader1_U0_ap_ready_count;
wire   [0:0] start_for_ScaWriter_U0_din;
wire    start_for_ScaWriter_U0_full_n;
wire   [0:0] start_for_ScaWriter_U0_dout;
wire    start_for_ScaWriter_U0_empty_n;
wire   [0:0] start_for_EWiseMultipiler_U0_din;
wire    start_for_EWiseMultipiler_U0_full_n;
wire   [0:0] start_for_EWiseMultipiler_U0_dout;
wire    start_for_EWiseMultipiler_U0_empty_n;
wire    VecReader1_U0_start_full_n;
wire    VecReader1_U0_start_write;
wire   [0:0] start_for_AdderTree_U0_din;
wire    start_for_AdderTree_U0_full_n;
wire   [0:0] start_for_AdderTree_U0_dout;
wire    start_for_AdderTree_U0_empty_n;
wire   [0:0] start_for_Accumulator_U0_din;
wire    start_for_Accumulator_U0_full_n;
wire   [0:0] start_for_Accumulator_U0_dout;
wire    start_for_Accumulator_U0_empty_n;
wire    Accumulator_U0_start_full_n;
wire    Accumulator_U0_start_write;
wire    ScaWriter_U0_start_full_n;
wire    ScaWriter_U0_start_write;

// power-on initialization
initial begin
#0 ap_sync_reg_VecDotProduct_entry43_U0_ap_ready = 1'b0;
#0 VecDotProduct_entry43_U0_ap_ready_count = 2'd0;
#0 ap_sync_reg_VecReader_U0_ap_ready = 1'b0;
#0 VecReader_U0_ap_ready_count = 2'd0;
#0 ap_sync_reg_VecReader1_U0_ap_ready = 1'b0;
#0 VecReader1_U0_ap_ready_count = 2'd0;
end

VecDotProduct_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .readRep(readRep)
);

VecDotProduct_control_r_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_R_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_R_DATA_WIDTH ))
control_r_s_axi_U(
    .AWVALID(s_axi_control_r_AWVALID),
    .AWREADY(s_axi_control_r_AWREADY),
    .AWADDR(s_axi_control_r_AWADDR),
    .WVALID(s_axi_control_r_WVALID),
    .WREADY(s_axi_control_r_WREADY),
    .WDATA(s_axi_control_r_WDATA),
    .WSTRB(s_axi_control_r_WSTRB),
    .ARVALID(s_axi_control_r_ARVALID),
    .ARREADY(s_axi_control_r_ARREADY),
    .ARADDR(s_axi_control_r_ARADDR),
    .RVALID(s_axi_control_r_RVALID),
    .RREADY(s_axi_control_r_RREADY),
    .RDATA(s_axi_control_r_RDATA),
    .RRESP(s_axi_control_r_RRESP),
    .BVALID(s_axi_control_r_BVALID),
    .BREADY(s_axi_control_r_BREADY),
    .BRESP(s_axi_control_r_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .vecA(vecA),
    .vecB(vecB),
    .scaC(scaC),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

VecDotProduct_ddr0_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 128 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DDR0_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DDR0_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DDR0_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DDR0_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DDR0_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DDR0_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DDR0_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DDR0_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DDR0_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DDR0_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DDR0_CACHE_VALUE ))
ddr0_m_axi_U(
    .AWVALID(m_axi_ddr0_AWVALID),
    .AWREADY(m_axi_ddr0_AWREADY),
    .AWADDR(m_axi_ddr0_AWADDR),
    .AWID(m_axi_ddr0_AWID),
    .AWLEN(m_axi_ddr0_AWLEN),
    .AWSIZE(m_axi_ddr0_AWSIZE),
    .AWBURST(m_axi_ddr0_AWBURST),
    .AWLOCK(m_axi_ddr0_AWLOCK),
    .AWCACHE(m_axi_ddr0_AWCACHE),
    .AWPROT(m_axi_ddr0_AWPROT),
    .AWQOS(m_axi_ddr0_AWQOS),
    .AWREGION(m_axi_ddr0_AWREGION),
    .AWUSER(m_axi_ddr0_AWUSER),
    .WVALID(m_axi_ddr0_WVALID),
    .WREADY(m_axi_ddr0_WREADY),
    .WDATA(m_axi_ddr0_WDATA),
    .WSTRB(m_axi_ddr0_WSTRB),
    .WLAST(m_axi_ddr0_WLAST),
    .WID(m_axi_ddr0_WID),
    .WUSER(m_axi_ddr0_WUSER),
    .ARVALID(m_axi_ddr0_ARVALID),
    .ARREADY(m_axi_ddr0_ARREADY),
    .ARADDR(m_axi_ddr0_ARADDR),
    .ARID(m_axi_ddr0_ARID),
    .ARLEN(m_axi_ddr0_ARLEN),
    .ARSIZE(m_axi_ddr0_ARSIZE),
    .ARBURST(m_axi_ddr0_ARBURST),
    .ARLOCK(m_axi_ddr0_ARLOCK),
    .ARCACHE(m_axi_ddr0_ARCACHE),
    .ARPROT(m_axi_ddr0_ARPROT),
    .ARQOS(m_axi_ddr0_ARQOS),
    .ARREGION(m_axi_ddr0_ARREGION),
    .ARUSER(m_axi_ddr0_ARUSER),
    .RVALID(m_axi_ddr0_RVALID),
    .RREADY(m_axi_ddr0_RREADY),
    .RDATA(m_axi_ddr0_RDATA),
    .RLAST(m_axi_ddr0_RLAST),
    .RID(m_axi_ddr0_RID),
    .RUSER(m_axi_ddr0_RUSER),
    .RRESP(m_axi_ddr0_RRESP),
    .BVALID(m_axi_ddr0_BVALID),
    .BREADY(m_axi_ddr0_BREADY),
    .BRESP(m_axi_ddr0_BRESP),
    .BID(m_axi_ddr0_BID),
    .BUSER(m_axi_ddr0_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(VecReader_U0_m_axi_ddr0_ARVALID),
    .I_ARREADY(ddr0_ARREADY),
    .I_ARADDR(VecReader_U0_m_axi_ddr0_ARADDR),
    .I_ARID(VecReader_U0_m_axi_ddr0_ARID),
    .I_ARLEN(VecReader_U0_m_axi_ddr0_ARLEN),
    .I_ARSIZE(VecReader_U0_m_axi_ddr0_ARSIZE),
    .I_ARLOCK(VecReader_U0_m_axi_ddr0_ARLOCK),
    .I_ARCACHE(VecReader_U0_m_axi_ddr0_ARCACHE),
    .I_ARQOS(VecReader_U0_m_axi_ddr0_ARQOS),
    .I_ARPROT(VecReader_U0_m_axi_ddr0_ARPROT),
    .I_ARUSER(VecReader_U0_m_axi_ddr0_ARUSER),
    .I_ARBURST(VecReader_U0_m_axi_ddr0_ARBURST),
    .I_ARREGION(VecReader_U0_m_axi_ddr0_ARREGION),
    .I_RVALID(ddr0_RVALID),
    .I_RREADY(VecReader_U0_m_axi_ddr0_RREADY),
    .I_RDATA(ddr0_RDATA),
    .I_RID(ddr0_RID),
    .I_RUSER(ddr0_RUSER),
    .I_RRESP(ddr0_RRESP),
    .I_RLAST(ddr0_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(ddr0_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(ddr0_WREADY),
    .I_WDATA(128'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(16'd0),
    .I_BVALID(ddr0_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(ddr0_BRESP),
    .I_BID(ddr0_BID),
    .I_BUSER(ddr0_BUSER)
);

VecDotProduct_ddr1_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 128 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DDR1_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DDR1_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DDR1_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DDR1_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DDR1_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DDR1_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DDR1_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DDR1_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DDR1_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DDR1_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DDR1_CACHE_VALUE ))
ddr1_m_axi_U(
    .AWVALID(m_axi_ddr1_AWVALID),
    .AWREADY(m_axi_ddr1_AWREADY),
    .AWADDR(m_axi_ddr1_AWADDR),
    .AWID(m_axi_ddr1_AWID),
    .AWLEN(m_axi_ddr1_AWLEN),
    .AWSIZE(m_axi_ddr1_AWSIZE),
    .AWBURST(m_axi_ddr1_AWBURST),
    .AWLOCK(m_axi_ddr1_AWLOCK),
    .AWCACHE(m_axi_ddr1_AWCACHE),
    .AWPROT(m_axi_ddr1_AWPROT),
    .AWQOS(m_axi_ddr1_AWQOS),
    .AWREGION(m_axi_ddr1_AWREGION),
    .AWUSER(m_axi_ddr1_AWUSER),
    .WVALID(m_axi_ddr1_WVALID),
    .WREADY(m_axi_ddr1_WREADY),
    .WDATA(m_axi_ddr1_WDATA),
    .WSTRB(m_axi_ddr1_WSTRB),
    .WLAST(m_axi_ddr1_WLAST),
    .WID(m_axi_ddr1_WID),
    .WUSER(m_axi_ddr1_WUSER),
    .ARVALID(m_axi_ddr1_ARVALID),
    .ARREADY(m_axi_ddr1_ARREADY),
    .ARADDR(m_axi_ddr1_ARADDR),
    .ARID(m_axi_ddr1_ARID),
    .ARLEN(m_axi_ddr1_ARLEN),
    .ARSIZE(m_axi_ddr1_ARSIZE),
    .ARBURST(m_axi_ddr1_ARBURST),
    .ARLOCK(m_axi_ddr1_ARLOCK),
    .ARCACHE(m_axi_ddr1_ARCACHE),
    .ARPROT(m_axi_ddr1_ARPROT),
    .ARQOS(m_axi_ddr1_ARQOS),
    .ARREGION(m_axi_ddr1_ARREGION),
    .ARUSER(m_axi_ddr1_ARUSER),
    .RVALID(m_axi_ddr1_RVALID),
    .RREADY(m_axi_ddr1_RREADY),
    .RDATA(m_axi_ddr1_RDATA),
    .RLAST(m_axi_ddr1_RLAST),
    .RID(m_axi_ddr1_RID),
    .RUSER(m_axi_ddr1_RUSER),
    .RRESP(m_axi_ddr1_RRESP),
    .BVALID(m_axi_ddr1_BVALID),
    .BREADY(m_axi_ddr1_BREADY),
    .BRESP(m_axi_ddr1_BRESP),
    .BID(m_axi_ddr1_BID),
    .BUSER(m_axi_ddr1_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(VecReader1_U0_m_axi_ddr0_ARVALID),
    .I_ARREADY(ddr1_ARREADY),
    .I_ARADDR(VecReader1_U0_m_axi_ddr0_ARADDR),
    .I_ARID(VecReader1_U0_m_axi_ddr0_ARID),
    .I_ARLEN(VecReader1_U0_m_axi_ddr0_ARLEN),
    .I_ARSIZE(VecReader1_U0_m_axi_ddr0_ARSIZE),
    .I_ARLOCK(VecReader1_U0_m_axi_ddr0_ARLOCK),
    .I_ARCACHE(VecReader1_U0_m_axi_ddr0_ARCACHE),
    .I_ARQOS(VecReader1_U0_m_axi_ddr0_ARQOS),
    .I_ARPROT(VecReader1_U0_m_axi_ddr0_ARPROT),
    .I_ARUSER(VecReader1_U0_m_axi_ddr0_ARUSER),
    .I_ARBURST(VecReader1_U0_m_axi_ddr0_ARBURST),
    .I_ARREGION(VecReader1_U0_m_axi_ddr0_ARREGION),
    .I_RVALID(ddr1_RVALID),
    .I_RREADY(VecReader1_U0_m_axi_ddr0_RREADY),
    .I_RDATA(ddr1_RDATA),
    .I_RID(ddr1_RID),
    .I_RUSER(ddr1_RUSER),
    .I_RRESP(ddr1_RRESP),
    .I_RLAST(ddr1_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(ddr1_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(ddr1_WREADY),
    .I_WDATA(128'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(16'd0),
    .I_BVALID(ddr1_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(ddr1_BRESP),
    .I_BID(ddr1_BID),
    .I_BUSER(ddr1_BUSER)
);

VecDotProduct_ddr2_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DDR2_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DDR2_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DDR2_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DDR2_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DDR2_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DDR2_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DDR2_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DDR2_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DDR2_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DDR2_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DDR2_CACHE_VALUE ))
ddr2_m_axi_U(
    .AWVALID(m_axi_ddr2_AWVALID),
    .AWREADY(m_axi_ddr2_AWREADY),
    .AWADDR(m_axi_ddr2_AWADDR),
    .AWID(m_axi_ddr2_AWID),
    .AWLEN(m_axi_ddr2_AWLEN),
    .AWSIZE(m_axi_ddr2_AWSIZE),
    .AWBURST(m_axi_ddr2_AWBURST),
    .AWLOCK(m_axi_ddr2_AWLOCK),
    .AWCACHE(m_axi_ddr2_AWCACHE),
    .AWPROT(m_axi_ddr2_AWPROT),
    .AWQOS(m_axi_ddr2_AWQOS),
    .AWREGION(m_axi_ddr2_AWREGION),
    .AWUSER(m_axi_ddr2_AWUSER),
    .WVALID(m_axi_ddr2_WVALID),
    .WREADY(m_axi_ddr2_WREADY),
    .WDATA(m_axi_ddr2_WDATA),
    .WSTRB(m_axi_ddr2_WSTRB),
    .WLAST(m_axi_ddr2_WLAST),
    .WID(m_axi_ddr2_WID),
    .WUSER(m_axi_ddr2_WUSER),
    .ARVALID(m_axi_ddr2_ARVALID),
    .ARREADY(m_axi_ddr2_ARREADY),
    .ARADDR(m_axi_ddr2_ARADDR),
    .ARID(m_axi_ddr2_ARID),
    .ARLEN(m_axi_ddr2_ARLEN),
    .ARSIZE(m_axi_ddr2_ARSIZE),
    .ARBURST(m_axi_ddr2_ARBURST),
    .ARLOCK(m_axi_ddr2_ARLOCK),
    .ARCACHE(m_axi_ddr2_ARCACHE),
    .ARPROT(m_axi_ddr2_ARPROT),
    .ARQOS(m_axi_ddr2_ARQOS),
    .ARREGION(m_axi_ddr2_ARREGION),
    .ARUSER(m_axi_ddr2_ARUSER),
    .RVALID(m_axi_ddr2_RVALID),
    .RREADY(m_axi_ddr2_RREADY),
    .RDATA(m_axi_ddr2_RDATA),
    .RLAST(m_axi_ddr2_RLAST),
    .RID(m_axi_ddr2_RID),
    .RUSER(m_axi_ddr2_RUSER),
    .RRESP(m_axi_ddr2_RRESP),
    .BVALID(m_axi_ddr2_BVALID),
    .BREADY(m_axi_ddr2_BREADY),
    .BRESP(m_axi_ddr2_BRESP),
    .BID(m_axi_ddr2_BID),
    .BUSER(m_axi_ddr2_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(ddr2_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(ddr2_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(ddr2_RDATA),
    .I_RID(ddr2_RID),
    .I_RUSER(ddr2_RUSER),
    .I_RRESP(ddr2_RRESP),
    .I_RLAST(ddr2_RLAST),
    .I_AWVALID(ScaWriter_U0_m_axi_ddr2_AWVALID),
    .I_AWREADY(ddr2_AWREADY),
    .I_AWADDR(ScaWriter_U0_m_axi_ddr2_AWADDR),
    .I_AWID(ScaWriter_U0_m_axi_ddr2_AWID),
    .I_AWLEN(ScaWriter_U0_m_axi_ddr2_AWLEN),
    .I_AWSIZE(ScaWriter_U0_m_axi_ddr2_AWSIZE),
    .I_AWLOCK(ScaWriter_U0_m_axi_ddr2_AWLOCK),
    .I_AWCACHE(ScaWriter_U0_m_axi_ddr2_AWCACHE),
    .I_AWQOS(ScaWriter_U0_m_axi_ddr2_AWQOS),
    .I_AWPROT(ScaWriter_U0_m_axi_ddr2_AWPROT),
    .I_AWUSER(ScaWriter_U0_m_axi_ddr2_AWUSER),
    .I_AWBURST(ScaWriter_U0_m_axi_ddr2_AWBURST),
    .I_AWREGION(ScaWriter_U0_m_axi_ddr2_AWREGION),
    .I_WVALID(ScaWriter_U0_m_axi_ddr2_WVALID),
    .I_WREADY(ddr2_WREADY),
    .I_WDATA(ScaWriter_U0_m_axi_ddr2_WDATA),
    .I_WID(ScaWriter_U0_m_axi_ddr2_WID),
    .I_WUSER(ScaWriter_U0_m_axi_ddr2_WUSER),
    .I_WLAST(ScaWriter_U0_m_axi_ddr2_WLAST),
    .I_WSTRB(ScaWriter_U0_m_axi_ddr2_WSTRB),
    .I_BVALID(ddr2_BVALID),
    .I_BREADY(ScaWriter_U0_m_axi_ddr2_BREADY),
    .I_BRESP(ddr2_BRESP),
    .I_BID(ddr2_BID),
    .I_BUSER(ddr2_BUSER)
);

VecDotProduct_VecDotProduct_entry43 VecDotProduct_entry43_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(VecDotProduct_entry43_U0_ap_start),
    .start_full_n(start_for_ScaWriter_U0_full_n),
    .ap_done(VecDotProduct_entry43_U0_ap_done),
    .ap_continue(VecDotProduct_entry43_U0_ap_continue),
    .ap_idle(VecDotProduct_entry43_U0_ap_idle),
    .ap_ready(VecDotProduct_entry43_U0_ap_ready),
    .start_out(VecDotProduct_entry43_U0_start_out),
    .start_write(VecDotProduct_entry43_U0_start_write),
    .vecA(vecA),
    .vecB(vecB),
    .scaC(scaC),
    .vecA_out_din(VecDotProduct_entry43_U0_vecA_out_din),
    .vecA_out_full_n(vecA_c_full_n),
    .vecA_out_write(VecDotProduct_entry43_U0_vecA_out_write),
    .vecB_out_din(VecDotProduct_entry43_U0_vecB_out_din),
    .vecB_out_full_n(vecB_c_full_n),
    .vecB_out_write(VecDotProduct_entry43_U0_vecB_out_write),
    .scaC_out_din(VecDotProduct_entry43_U0_scaC_out_din),
    .scaC_out_full_n(scaC_c_full_n),
    .scaC_out_write(VecDotProduct_entry43_U0_scaC_out_write)
);

VecDotProduct_VecReader VecReader_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(VecReader_U0_ap_start),
    .start_full_n(start_for_EWiseMultipiler_U0_full_n),
    .ap_done(VecReader_U0_ap_done),
    .ap_continue(VecReader_U0_ap_continue),
    .ap_idle(VecReader_U0_ap_idle),
    .ap_ready(VecReader_U0_ap_ready),
    .start_out(VecReader_U0_start_out),
    .start_write(VecReader_U0_start_write),
    .m_axi_ddr0_AWVALID(VecReader_U0_m_axi_ddr0_AWVALID),
    .m_axi_ddr0_AWREADY(1'b0),
    .m_axi_ddr0_AWADDR(VecReader_U0_m_axi_ddr0_AWADDR),
    .m_axi_ddr0_AWID(VecReader_U0_m_axi_ddr0_AWID),
    .m_axi_ddr0_AWLEN(VecReader_U0_m_axi_ddr0_AWLEN),
    .m_axi_ddr0_AWSIZE(VecReader_U0_m_axi_ddr0_AWSIZE),
    .m_axi_ddr0_AWBURST(VecReader_U0_m_axi_ddr0_AWBURST),
    .m_axi_ddr0_AWLOCK(VecReader_U0_m_axi_ddr0_AWLOCK),
    .m_axi_ddr0_AWCACHE(VecReader_U0_m_axi_ddr0_AWCACHE),
    .m_axi_ddr0_AWPROT(VecReader_U0_m_axi_ddr0_AWPROT),
    .m_axi_ddr0_AWQOS(VecReader_U0_m_axi_ddr0_AWQOS),
    .m_axi_ddr0_AWREGION(VecReader_U0_m_axi_ddr0_AWREGION),
    .m_axi_ddr0_AWUSER(VecReader_U0_m_axi_ddr0_AWUSER),
    .m_axi_ddr0_WVALID(VecReader_U0_m_axi_ddr0_WVALID),
    .m_axi_ddr0_WREADY(1'b0),
    .m_axi_ddr0_WDATA(VecReader_U0_m_axi_ddr0_WDATA),
    .m_axi_ddr0_WSTRB(VecReader_U0_m_axi_ddr0_WSTRB),
    .m_axi_ddr0_WLAST(VecReader_U0_m_axi_ddr0_WLAST),
    .m_axi_ddr0_WID(VecReader_U0_m_axi_ddr0_WID),
    .m_axi_ddr0_WUSER(VecReader_U0_m_axi_ddr0_WUSER),
    .m_axi_ddr0_ARVALID(VecReader_U0_m_axi_ddr0_ARVALID),
    .m_axi_ddr0_ARREADY(ddr0_ARREADY),
    .m_axi_ddr0_ARADDR(VecReader_U0_m_axi_ddr0_ARADDR),
    .m_axi_ddr0_ARID(VecReader_U0_m_axi_ddr0_ARID),
    .m_axi_ddr0_ARLEN(VecReader_U0_m_axi_ddr0_ARLEN),
    .m_axi_ddr0_ARSIZE(VecReader_U0_m_axi_ddr0_ARSIZE),
    .m_axi_ddr0_ARBURST(VecReader_U0_m_axi_ddr0_ARBURST),
    .m_axi_ddr0_ARLOCK(VecReader_U0_m_axi_ddr0_ARLOCK),
    .m_axi_ddr0_ARCACHE(VecReader_U0_m_axi_ddr0_ARCACHE),
    .m_axi_ddr0_ARPROT(VecReader_U0_m_axi_ddr0_ARPROT),
    .m_axi_ddr0_ARQOS(VecReader_U0_m_axi_ddr0_ARQOS),
    .m_axi_ddr0_ARREGION(VecReader_U0_m_axi_ddr0_ARREGION),
    .m_axi_ddr0_ARUSER(VecReader_U0_m_axi_ddr0_ARUSER),
    .m_axi_ddr0_RVALID(ddr0_RVALID),
    .m_axi_ddr0_RREADY(VecReader_U0_m_axi_ddr0_RREADY),
    .m_axi_ddr0_RDATA(ddr0_RDATA),
    .m_axi_ddr0_RLAST(ddr0_RLAST),
    .m_axi_ddr0_RID(ddr0_RID),
    .m_axi_ddr0_RUSER(ddr0_RUSER),
    .m_axi_ddr0_RRESP(ddr0_RRESP),
    .m_axi_ddr0_BVALID(1'b0),
    .m_axi_ddr0_BREADY(VecReader_U0_m_axi_ddr0_BREADY),
    .m_axi_ddr0_BRESP(2'd0),
    .m_axi_ddr0_BID(1'd0),
    .m_axi_ddr0_BUSER(1'd0),
    .fifoA21_din(VecReader_U0_fifoA21_din),
    .fifoA21_full_n(fifoA_stream_s_full_n),
    .fifoA21_write(VecReader_U0_fifoA21_write),
    .ddr_dout(vecA_c_dout),
    .ddr_empty_n(vecA_c_empty_n),
    .ddr_read(VecReader_U0_ddr_read),
    .readRep(readRep)
);

VecDotProduct_VecReader1 VecReader1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(VecReader1_U0_ap_start),
    .ap_done(VecReader1_U0_ap_done),
    .ap_continue(VecReader1_U0_ap_continue),
    .ap_idle(VecReader1_U0_ap_idle),
    .ap_ready(VecReader1_U0_ap_ready),
    .m_axi_ddr0_AWVALID(VecReader1_U0_m_axi_ddr0_AWVALID),
    .m_axi_ddr0_AWREADY(1'b0),
    .m_axi_ddr0_AWADDR(VecReader1_U0_m_axi_ddr0_AWADDR),
    .m_axi_ddr0_AWID(VecReader1_U0_m_axi_ddr0_AWID),
    .m_axi_ddr0_AWLEN(VecReader1_U0_m_axi_ddr0_AWLEN),
    .m_axi_ddr0_AWSIZE(VecReader1_U0_m_axi_ddr0_AWSIZE),
    .m_axi_ddr0_AWBURST(VecReader1_U0_m_axi_ddr0_AWBURST),
    .m_axi_ddr0_AWLOCK(VecReader1_U0_m_axi_ddr0_AWLOCK),
    .m_axi_ddr0_AWCACHE(VecReader1_U0_m_axi_ddr0_AWCACHE),
    .m_axi_ddr0_AWPROT(VecReader1_U0_m_axi_ddr0_AWPROT),
    .m_axi_ddr0_AWQOS(VecReader1_U0_m_axi_ddr0_AWQOS),
    .m_axi_ddr0_AWREGION(VecReader1_U0_m_axi_ddr0_AWREGION),
    .m_axi_ddr0_AWUSER(VecReader1_U0_m_axi_ddr0_AWUSER),
    .m_axi_ddr0_WVALID(VecReader1_U0_m_axi_ddr0_WVALID),
    .m_axi_ddr0_WREADY(1'b0),
    .m_axi_ddr0_WDATA(VecReader1_U0_m_axi_ddr0_WDATA),
    .m_axi_ddr0_WSTRB(VecReader1_U0_m_axi_ddr0_WSTRB),
    .m_axi_ddr0_WLAST(VecReader1_U0_m_axi_ddr0_WLAST),
    .m_axi_ddr0_WID(VecReader1_U0_m_axi_ddr0_WID),
    .m_axi_ddr0_WUSER(VecReader1_U0_m_axi_ddr0_WUSER),
    .m_axi_ddr0_ARVALID(VecReader1_U0_m_axi_ddr0_ARVALID),
    .m_axi_ddr0_ARREADY(ddr1_ARREADY),
    .m_axi_ddr0_ARADDR(VecReader1_U0_m_axi_ddr0_ARADDR),
    .m_axi_ddr0_ARID(VecReader1_U0_m_axi_ddr0_ARID),
    .m_axi_ddr0_ARLEN(VecReader1_U0_m_axi_ddr0_ARLEN),
    .m_axi_ddr0_ARSIZE(VecReader1_U0_m_axi_ddr0_ARSIZE),
    .m_axi_ddr0_ARBURST(VecReader1_U0_m_axi_ddr0_ARBURST),
    .m_axi_ddr0_ARLOCK(VecReader1_U0_m_axi_ddr0_ARLOCK),
    .m_axi_ddr0_ARCACHE(VecReader1_U0_m_axi_ddr0_ARCACHE),
    .m_axi_ddr0_ARPROT(VecReader1_U0_m_axi_ddr0_ARPROT),
    .m_axi_ddr0_ARQOS(VecReader1_U0_m_axi_ddr0_ARQOS),
    .m_axi_ddr0_ARREGION(VecReader1_U0_m_axi_ddr0_ARREGION),
    .m_axi_ddr0_ARUSER(VecReader1_U0_m_axi_ddr0_ARUSER),
    .m_axi_ddr0_RVALID(ddr1_RVALID),
    .m_axi_ddr0_RREADY(VecReader1_U0_m_axi_ddr0_RREADY),
    .m_axi_ddr0_RDATA(ddr1_RDATA),
    .m_axi_ddr0_RLAST(ddr1_RLAST),
    .m_axi_ddr0_RID(ddr1_RID),
    .m_axi_ddr0_RUSER(ddr1_RUSER),
    .m_axi_ddr0_RRESP(ddr1_RRESP),
    .m_axi_ddr0_BVALID(1'b0),
    .m_axi_ddr0_BREADY(VecReader1_U0_m_axi_ddr0_BREADY),
    .m_axi_ddr0_BRESP(2'd0),
    .m_axi_ddr0_BID(1'd0),
    .m_axi_ddr0_BUSER(1'd0),
    .fifoA21_din(VecReader1_U0_fifoA21_din),
    .fifoA21_full_n(fifoB_stream_s_full_n),
    .fifoA21_write(VecReader1_U0_fifoA21_write),
    .ddr_dout(vecB_c_dout),
    .ddr_empty_n(vecB_c_empty_n),
    .ddr_read(VecReader1_U0_ddr_read),
    .readRep(readRep)
);

VecDotProduct_EWiseMultipiler EWiseMultipiler_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(EWiseMultipiler_U0_ap_start),
    .start_full_n(start_for_AdderTree_U0_full_n),
    .ap_done(EWiseMultipiler_U0_ap_done),
    .ap_continue(EWiseMultipiler_U0_ap_continue),
    .ap_idle(EWiseMultipiler_U0_ap_idle),
    .ap_ready(EWiseMultipiler_U0_ap_ready),
    .start_out(EWiseMultipiler_U0_start_out),
    .start_write(EWiseMultipiler_U0_start_write),
    .fifoA21_dout(fifoA_stream_s_dout),
    .fifoA21_empty_n(fifoA_stream_s_empty_n),
    .fifoA21_read(EWiseMultipiler_U0_fifoA21_read),
    .fifoB22_dout(fifoB_stream_s_dout),
    .fifoB22_empty_n(fifoB_stream_s_empty_n),
    .fifoB22_read(EWiseMultipiler_U0_fifoB22_read),
    .fifoC123_din(EWiseMultipiler_U0_fifoC123_din),
    .fifoC123_full_n(fifoC1_stream_s_full_n),
    .fifoC123_write(EWiseMultipiler_U0_fifoC123_write),
    .readRep(readRep)
);

VecDotProduct_AdderTree AdderTree_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(AdderTree_U0_ap_start),
    .start_full_n(start_for_Accumulator_U0_full_n),
    .ap_done(AdderTree_U0_ap_done),
    .ap_continue(AdderTree_U0_ap_continue),
    .ap_idle(AdderTree_U0_ap_idle),
    .ap_ready(AdderTree_U0_ap_ready),
    .start_out(AdderTree_U0_start_out),
    .start_write(AdderTree_U0_start_write),
    .fifoC123_dout(fifoC1_stream_s_dout),
    .fifoC123_empty_n(fifoC1_stream_s_empty_n),
    .fifoC123_read(AdderTree_U0_fifoC123_read),
    .fifoC224_din(AdderTree_U0_fifoC224_din),
    .fifoC224_full_n(fifoC2_stream_s_full_n),
    .fifoC224_write(AdderTree_U0_fifoC224_write),
    .readRep(readRep)
);

VecDotProduct_Accumulator Accumulator_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(Accumulator_U0_ap_start),
    .ap_done(Accumulator_U0_ap_done),
    .ap_continue(Accumulator_U0_ap_continue),
    .ap_idle(Accumulator_U0_ap_idle),
    .ap_ready(Accumulator_U0_ap_ready),
    .fifoC224_dout(fifoC2_stream_s_dout),
    .fifoC224_empty_n(fifoC2_stream_s_empty_n),
    .fifoC224_read(Accumulator_U0_fifoC224_read),
    .fifoC325_din(Accumulator_U0_fifoC325_din),
    .fifoC325_full_n(fifoC3_stream_s_full_n),
    .fifoC325_write(Accumulator_U0_fifoC325_write),
    .readRep(readRep)
);

VecDotProduct_ScaWriter ScaWriter_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(ScaWriter_U0_ap_start),
    .ap_done(ScaWriter_U0_ap_done),
    .ap_continue(ScaWriter_U0_ap_continue),
    .ap_idle(ScaWriter_U0_ap_idle),
    .ap_ready(ScaWriter_U0_ap_ready),
    .fifoC325_dout(fifoC3_stream_s_dout),
    .fifoC325_empty_n(fifoC3_stream_s_empty_n),
    .fifoC325_read(ScaWriter_U0_fifoC325_read),
    .m_axi_ddr2_AWVALID(ScaWriter_U0_m_axi_ddr2_AWVALID),
    .m_axi_ddr2_AWREADY(ddr2_AWREADY),
    .m_axi_ddr2_AWADDR(ScaWriter_U0_m_axi_ddr2_AWADDR),
    .m_axi_ddr2_AWID(ScaWriter_U0_m_axi_ddr2_AWID),
    .m_axi_ddr2_AWLEN(ScaWriter_U0_m_axi_ddr2_AWLEN),
    .m_axi_ddr2_AWSIZE(ScaWriter_U0_m_axi_ddr2_AWSIZE),
    .m_axi_ddr2_AWBURST(ScaWriter_U0_m_axi_ddr2_AWBURST),
    .m_axi_ddr2_AWLOCK(ScaWriter_U0_m_axi_ddr2_AWLOCK),
    .m_axi_ddr2_AWCACHE(ScaWriter_U0_m_axi_ddr2_AWCACHE),
    .m_axi_ddr2_AWPROT(ScaWriter_U0_m_axi_ddr2_AWPROT),
    .m_axi_ddr2_AWQOS(ScaWriter_U0_m_axi_ddr2_AWQOS),
    .m_axi_ddr2_AWREGION(ScaWriter_U0_m_axi_ddr2_AWREGION),
    .m_axi_ddr2_AWUSER(ScaWriter_U0_m_axi_ddr2_AWUSER),
    .m_axi_ddr2_WVALID(ScaWriter_U0_m_axi_ddr2_WVALID),
    .m_axi_ddr2_WREADY(ddr2_WREADY),
    .m_axi_ddr2_WDATA(ScaWriter_U0_m_axi_ddr2_WDATA),
    .m_axi_ddr2_WSTRB(ScaWriter_U0_m_axi_ddr2_WSTRB),
    .m_axi_ddr2_WLAST(ScaWriter_U0_m_axi_ddr2_WLAST),
    .m_axi_ddr2_WID(ScaWriter_U0_m_axi_ddr2_WID),
    .m_axi_ddr2_WUSER(ScaWriter_U0_m_axi_ddr2_WUSER),
    .m_axi_ddr2_ARVALID(ScaWriter_U0_m_axi_ddr2_ARVALID),
    .m_axi_ddr2_ARREADY(1'b0),
    .m_axi_ddr2_ARADDR(ScaWriter_U0_m_axi_ddr2_ARADDR),
    .m_axi_ddr2_ARID(ScaWriter_U0_m_axi_ddr2_ARID),
    .m_axi_ddr2_ARLEN(ScaWriter_U0_m_axi_ddr2_ARLEN),
    .m_axi_ddr2_ARSIZE(ScaWriter_U0_m_axi_ddr2_ARSIZE),
    .m_axi_ddr2_ARBURST(ScaWriter_U0_m_axi_ddr2_ARBURST),
    .m_axi_ddr2_ARLOCK(ScaWriter_U0_m_axi_ddr2_ARLOCK),
    .m_axi_ddr2_ARCACHE(ScaWriter_U0_m_axi_ddr2_ARCACHE),
    .m_axi_ddr2_ARPROT(ScaWriter_U0_m_axi_ddr2_ARPROT),
    .m_axi_ddr2_ARQOS(ScaWriter_U0_m_axi_ddr2_ARQOS),
    .m_axi_ddr2_ARREGION(ScaWriter_U0_m_axi_ddr2_ARREGION),
    .m_axi_ddr2_ARUSER(ScaWriter_U0_m_axi_ddr2_ARUSER),
    .m_axi_ddr2_RVALID(1'b0),
    .m_axi_ddr2_RREADY(ScaWriter_U0_m_axi_ddr2_RREADY),
    .m_axi_ddr2_RDATA(32'd0),
    .m_axi_ddr2_RLAST(1'b0),
    .m_axi_ddr2_RID(1'd0),
    .m_axi_ddr2_RUSER(1'd0),
    .m_axi_ddr2_RRESP(2'd0),
    .m_axi_ddr2_BVALID(ddr2_BVALID),
    .m_axi_ddr2_BREADY(ScaWriter_U0_m_axi_ddr2_BREADY),
    .m_axi_ddr2_BRESP(ddr2_BRESP),
    .m_axi_ddr2_BID(ddr2_BID),
    .m_axi_ddr2_BUSER(ddr2_BUSER),
    .ddr_dout(scaC_c_dout),
    .ddr_empty_n(scaC_c_empty_n),
    .ddr_read(ScaWriter_U0_ddr_read)
);

VecDotProduct_fifo_w64_d2_S vecA_c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(VecDotProduct_entry43_U0_vecA_out_din),
    .if_full_n(vecA_c_full_n),
    .if_write(VecDotProduct_entry43_U0_vecA_out_write),
    .if_dout(vecA_c_dout),
    .if_empty_n(vecA_c_empty_n),
    .if_read(VecReader_U0_ddr_read)
);

VecDotProduct_fifo_w64_d2_S vecB_c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(VecDotProduct_entry43_U0_vecB_out_din),
    .if_full_n(vecB_c_full_n),
    .if_write(VecDotProduct_entry43_U0_vecB_out_write),
    .if_dout(vecB_c_dout),
    .if_empty_n(vecB_c_empty_n),
    .if_read(VecReader1_U0_ddr_read)
);

VecDotProduct_fifo_w64_d6_S scaC_c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(VecDotProduct_entry43_U0_scaC_out_din),
    .if_full_n(scaC_c_full_n),
    .if_write(VecDotProduct_entry43_U0_scaC_out_write),
    .if_dout(scaC_c_dout),
    .if_empty_n(scaC_c_empty_n),
    .if_read(ScaWriter_U0_ddr_read)
);

VecDotProduct_fifo_w128_d16_A fifoA_stream_s_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(VecReader_U0_fifoA21_din),
    .if_full_n(fifoA_stream_s_full_n),
    .if_write(VecReader_U0_fifoA21_write),
    .if_dout(fifoA_stream_s_dout),
    .if_empty_n(fifoA_stream_s_empty_n),
    .if_read(EWiseMultipiler_U0_fifoA21_read)
);

VecDotProduct_fifo_w128_d16_A fifoB_stream_s_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(VecReader1_U0_fifoA21_din),
    .if_full_n(fifoB_stream_s_full_n),
    .if_write(VecReader1_U0_fifoA21_write),
    .if_dout(fifoB_stream_s_dout),
    .if_empty_n(fifoB_stream_s_empty_n),
    .if_read(EWiseMultipiler_U0_fifoB22_read)
);

VecDotProduct_fifo_w256_d16_A fifoC1_stream_s_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(EWiseMultipiler_U0_fifoC123_din),
    .if_full_n(fifoC1_stream_s_full_n),
    .if_write(EWiseMultipiler_U0_fifoC123_write),
    .if_dout(fifoC1_stream_s_dout),
    .if_empty_n(fifoC1_stream_s_empty_n),
    .if_read(AdderTree_U0_fifoC123_read)
);

VecDotProduct_fifo_w32_d16_S fifoC2_stream_s_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(AdderTree_U0_fifoC224_din),
    .if_full_n(fifoC2_stream_s_full_n),
    .if_write(AdderTree_U0_fifoC224_write),
    .if_dout(fifoC2_stream_s_dout),
    .if_empty_n(fifoC2_stream_s_empty_n),
    .if_read(Accumulator_U0_fifoC224_read)
);

VecDotProduct_fifo_w32_d2_S fifoC3_stream_s_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Accumulator_U0_fifoC325_din),
    .if_full_n(fifoC3_stream_s_full_n),
    .if_write(Accumulator_U0_fifoC325_write),
    .if_dout(fifoC3_stream_s_dout),
    .if_empty_n(fifoC3_stream_s_empty_n),
    .if_read(ScaWriter_U0_fifoC325_read)
);

VecDotProduct_start_for_ScaWriter_U0 start_for_ScaWriter_U0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_ScaWriter_U0_din),
    .if_full_n(start_for_ScaWriter_U0_full_n),
    .if_write(VecDotProduct_entry43_U0_start_write),
    .if_dout(start_for_ScaWriter_U0_dout),
    .if_empty_n(start_for_ScaWriter_U0_empty_n),
    .if_read(ScaWriter_U0_ap_ready)
);

VecDotProduct_start_for_EWiseMultipiler_U0 start_for_EWiseMultipiler_U0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_EWiseMultipiler_U0_din),
    .if_full_n(start_for_EWiseMultipiler_U0_full_n),
    .if_write(VecReader_U0_start_write),
    .if_dout(start_for_EWiseMultipiler_U0_dout),
    .if_empty_n(start_for_EWiseMultipiler_U0_empty_n),
    .if_read(EWiseMultipiler_U0_ap_ready)
);

VecDotProduct_start_for_AdderTree_U0 start_for_AdderTree_U0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_AdderTree_U0_din),
    .if_full_n(start_for_AdderTree_U0_full_n),
    .if_write(EWiseMultipiler_U0_start_write),
    .if_dout(start_for_AdderTree_U0_dout),
    .if_empty_n(start_for_AdderTree_U0_empty_n),
    .if_read(AdderTree_U0_ap_ready)
);

VecDotProduct_start_for_Accumulator_U0 start_for_Accumulator_U0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_Accumulator_U0_din),
    .if_full_n(start_for_Accumulator_U0_full_n),
    .if_write(AdderTree_U0_start_write),
    .if_dout(start_for_Accumulator_U0_dout),
    .if_empty_n(start_for_Accumulator_U0_empty_n),
    .if_read(Accumulator_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_VecDotProduct_entry43_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_VecDotProduct_entry43_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_VecDotProduct_entry43_U0_ap_ready <= ap_sync_VecDotProduct_entry43_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_VecReader1_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_VecReader1_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_VecReader1_U0_ap_ready <= ap_sync_VecReader1_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_VecReader_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_VecReader_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_VecReader_U0_ap_ready <= ap_sync_VecReader_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sync_ready == 1'b1) & (1'b0 == VecDotProduct_entry43_U0_ap_ready))) begin
        VecDotProduct_entry43_U0_ap_ready_count <= (VecDotProduct_entry43_U0_ap_ready_count - 2'd1);
    end else if (((ap_sync_ready == 1'b0) & (1'b1 == VecDotProduct_entry43_U0_ap_ready))) begin
        VecDotProduct_entry43_U0_ap_ready_count <= (VecDotProduct_entry43_U0_ap_ready_count + 2'd1);
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sync_ready == 1'b1) & (1'b0 == VecReader1_U0_ap_ready))) begin
        VecReader1_U0_ap_ready_count <= (VecReader1_U0_ap_ready_count - 2'd1);
    end else if (((ap_sync_ready == 1'b0) & (1'b1 == VecReader1_U0_ap_ready))) begin
        VecReader1_U0_ap_ready_count <= (VecReader1_U0_ap_ready_count + 2'd1);
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sync_ready == 1'b1) & (1'b0 == VecReader_U0_ap_ready))) begin
        VecReader_U0_ap_ready_count <= (VecReader_U0_ap_ready_count - 2'd1);
    end else if (((ap_sync_ready == 1'b0) & (1'b1 == VecReader_U0_ap_ready))) begin
        VecReader_U0_ap_ready_count <= (VecReader_U0_ap_ready_count + 2'd1);
    end
end

assign Accumulator_U0_ap_continue = 1'b1;

assign Accumulator_U0_ap_start = start_for_Accumulator_U0_empty_n;

assign Accumulator_U0_start_full_n = 1'b1;

assign Accumulator_U0_start_write = 1'b0;

assign AdderTree_U0_ap_continue = 1'b1;

assign AdderTree_U0_ap_start = start_for_AdderTree_U0_empty_n;

assign EWiseMultipiler_U0_ap_continue = 1'b1;

assign EWiseMultipiler_U0_ap_start = start_for_EWiseMultipiler_U0_empty_n;

assign ScaWriter_U0_ap_continue = 1'b1;

assign ScaWriter_U0_ap_start = start_for_ScaWriter_U0_empty_n;

assign ScaWriter_U0_start_full_n = 1'b1;

assign ScaWriter_U0_start_write = 1'b0;

assign VecDotProduct_entry43_U0_ap_continue = 1'b1;

assign VecDotProduct_entry43_U0_ap_start = ((ap_sync_reg_VecDotProduct_entry43_U0_ap_ready ^ 1'b1) & ap_start);

assign VecReader1_U0_ap_continue = 1'b1;

assign VecReader1_U0_ap_start = ((ap_sync_reg_VecReader1_U0_ap_ready ^ 1'b1) & ap_start);

assign VecReader1_U0_start_full_n = 1'b1;

assign VecReader1_U0_start_write = 1'b0;

assign VecReader_U0_ap_continue = 1'b1;

assign VecReader_U0_ap_start = ((ap_sync_reg_VecReader_U0_ap_ready ^ 1'b1) & ap_start);

assign ap_done = ScaWriter_U0_ap_done;

assign ap_idle = (VecReader_U0_ap_idle & VecReader1_U0_ap_idle & VecDotProduct_entry43_U0_ap_idle & ScaWriter_U0_ap_idle & EWiseMultipiler_U0_ap_idle & AdderTree_U0_ap_idle & Accumulator_U0_ap_idle);

assign ap_ready = ap_sync_ready;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_VecDotProduct_entry43_U0_ap_ready = (ap_sync_reg_VecDotProduct_entry43_U0_ap_ready | VecDotProduct_entry43_U0_ap_ready);

assign ap_sync_VecReader1_U0_ap_ready = (ap_sync_reg_VecReader1_U0_ap_ready | VecReader1_U0_ap_ready);

assign ap_sync_VecReader_U0_ap_ready = (ap_sync_reg_VecReader_U0_ap_ready | VecReader_U0_ap_ready);

assign ap_sync_continue = 1'b1;

assign ap_sync_done = ScaWriter_U0_ap_done;

assign ap_sync_ready = (ap_sync_VecReader_U0_ap_ready & ap_sync_VecReader1_U0_ap_ready & ap_sync_VecDotProduct_entry43_U0_ap_ready);

assign start_for_Accumulator_U0_din = 1'b1;

assign start_for_AdderTree_U0_din = 1'b1;

assign start_for_EWiseMultipiler_U0_din = 1'b1;

assign start_for_ScaWriter_U0_din = 1'b1;

endmodule //VecDotProduct
