-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity VecDotProduct is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_CONTROL_R_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DDR0_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DDR0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DDR0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDR0_DATA_WIDTH : INTEGER := 128;
    C_M_AXI_DDR0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDR0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDR0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDR0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDR1_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DDR1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DDR1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDR1_DATA_WIDTH : INTEGER := 128;
    C_M_AXI_DDR1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDR1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDR1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDR1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDR2_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DDR2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DDR2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDR2_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DDR2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDR2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDR2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDR2_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDR0_USER_VALUE : INTEGER := 0;
    C_M_AXI_DDR0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DDR0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DDR1_USER_VALUE : INTEGER := 0;
    C_M_AXI_DDR1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DDR1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DDR2_USER_VALUE : INTEGER := 0;
    C_M_AXI_DDR2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DDR2_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_control_r_AWVALID : IN STD_LOGIC;
    s_axi_control_r_AWREADY : OUT STD_LOGIC;
    s_axi_control_r_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_ADDR_WIDTH-1 downto 0);
    s_axi_control_r_WVALID : IN STD_LOGIC;
    s_axi_control_r_WREADY : OUT STD_LOGIC;
    s_axi_control_r_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH-1 downto 0);
    s_axi_control_r_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH/8-1 downto 0);
    s_axi_control_r_ARVALID : IN STD_LOGIC;
    s_axi_control_r_ARREADY : OUT STD_LOGIC;
    s_axi_control_r_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_ADDR_WIDTH-1 downto 0);
    s_axi_control_r_RVALID : OUT STD_LOGIC;
    s_axi_control_r_RREADY : IN STD_LOGIC;
    s_axi_control_r_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH-1 downto 0);
    s_axi_control_r_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_r_BVALID : OUT STD_LOGIC;
    s_axi_control_r_BREADY : IN STD_LOGIC;
    s_axi_control_r_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    m_axi_ddr0_AWVALID : OUT STD_LOGIC;
    m_axi_ddr0_AWREADY : IN STD_LOGIC;
    m_axi_ddr0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR0_ADDR_WIDTH-1 downto 0);
    m_axi_ddr0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR0_ID_WIDTH-1 downto 0);
    m_axi_ddr0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ddr0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR0_AWUSER_WIDTH-1 downto 0);
    m_axi_ddr0_WVALID : OUT STD_LOGIC;
    m_axi_ddr0_WREADY : IN STD_LOGIC;
    m_axi_ddr0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR0_DATA_WIDTH-1 downto 0);
    m_axi_ddr0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR0_DATA_WIDTH/8-1 downto 0);
    m_axi_ddr0_WLAST : OUT STD_LOGIC;
    m_axi_ddr0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR0_ID_WIDTH-1 downto 0);
    m_axi_ddr0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR0_WUSER_WIDTH-1 downto 0);
    m_axi_ddr0_ARVALID : OUT STD_LOGIC;
    m_axi_ddr0_ARREADY : IN STD_LOGIC;
    m_axi_ddr0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR0_ADDR_WIDTH-1 downto 0);
    m_axi_ddr0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR0_ID_WIDTH-1 downto 0);
    m_axi_ddr0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ddr0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR0_ARUSER_WIDTH-1 downto 0);
    m_axi_ddr0_RVALID : IN STD_LOGIC;
    m_axi_ddr0_RREADY : OUT STD_LOGIC;
    m_axi_ddr0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DDR0_DATA_WIDTH-1 downto 0);
    m_axi_ddr0_RLAST : IN STD_LOGIC;
    m_axi_ddr0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DDR0_ID_WIDTH-1 downto 0);
    m_axi_ddr0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DDR0_RUSER_WIDTH-1 downto 0);
    m_axi_ddr0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr0_BVALID : IN STD_LOGIC;
    m_axi_ddr0_BREADY : OUT STD_LOGIC;
    m_axi_ddr0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DDR0_ID_WIDTH-1 downto 0);
    m_axi_ddr0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DDR0_BUSER_WIDTH-1 downto 0);
    m_axi_ddr1_AWVALID : OUT STD_LOGIC;
    m_axi_ddr1_AWREADY : IN STD_LOGIC;
    m_axi_ddr1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR1_ADDR_WIDTH-1 downto 0);
    m_axi_ddr1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR1_ID_WIDTH-1 downto 0);
    m_axi_ddr1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ddr1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR1_AWUSER_WIDTH-1 downto 0);
    m_axi_ddr1_WVALID : OUT STD_LOGIC;
    m_axi_ddr1_WREADY : IN STD_LOGIC;
    m_axi_ddr1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR1_DATA_WIDTH-1 downto 0);
    m_axi_ddr1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR1_DATA_WIDTH/8-1 downto 0);
    m_axi_ddr1_WLAST : OUT STD_LOGIC;
    m_axi_ddr1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR1_ID_WIDTH-1 downto 0);
    m_axi_ddr1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR1_WUSER_WIDTH-1 downto 0);
    m_axi_ddr1_ARVALID : OUT STD_LOGIC;
    m_axi_ddr1_ARREADY : IN STD_LOGIC;
    m_axi_ddr1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR1_ADDR_WIDTH-1 downto 0);
    m_axi_ddr1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR1_ID_WIDTH-1 downto 0);
    m_axi_ddr1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ddr1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR1_ARUSER_WIDTH-1 downto 0);
    m_axi_ddr1_RVALID : IN STD_LOGIC;
    m_axi_ddr1_RREADY : OUT STD_LOGIC;
    m_axi_ddr1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DDR1_DATA_WIDTH-1 downto 0);
    m_axi_ddr1_RLAST : IN STD_LOGIC;
    m_axi_ddr1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DDR1_ID_WIDTH-1 downto 0);
    m_axi_ddr1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DDR1_RUSER_WIDTH-1 downto 0);
    m_axi_ddr1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr1_BVALID : IN STD_LOGIC;
    m_axi_ddr1_BREADY : OUT STD_LOGIC;
    m_axi_ddr1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DDR1_ID_WIDTH-1 downto 0);
    m_axi_ddr1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DDR1_BUSER_WIDTH-1 downto 0);
    m_axi_ddr2_AWVALID : OUT STD_LOGIC;
    m_axi_ddr2_AWREADY : IN STD_LOGIC;
    m_axi_ddr2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR2_ADDR_WIDTH-1 downto 0);
    m_axi_ddr2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR2_ID_WIDTH-1 downto 0);
    m_axi_ddr2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ddr2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR2_AWUSER_WIDTH-1 downto 0);
    m_axi_ddr2_WVALID : OUT STD_LOGIC;
    m_axi_ddr2_WREADY : IN STD_LOGIC;
    m_axi_ddr2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR2_DATA_WIDTH-1 downto 0);
    m_axi_ddr2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR2_DATA_WIDTH/8-1 downto 0);
    m_axi_ddr2_WLAST : OUT STD_LOGIC;
    m_axi_ddr2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR2_ID_WIDTH-1 downto 0);
    m_axi_ddr2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR2_WUSER_WIDTH-1 downto 0);
    m_axi_ddr2_ARVALID : OUT STD_LOGIC;
    m_axi_ddr2_ARREADY : IN STD_LOGIC;
    m_axi_ddr2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR2_ADDR_WIDTH-1 downto 0);
    m_axi_ddr2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR2_ID_WIDTH-1 downto 0);
    m_axi_ddr2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ddr2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR2_ARUSER_WIDTH-1 downto 0);
    m_axi_ddr2_RVALID : IN STD_LOGIC;
    m_axi_ddr2_RREADY : OUT STD_LOGIC;
    m_axi_ddr2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DDR2_DATA_WIDTH-1 downto 0);
    m_axi_ddr2_RLAST : IN STD_LOGIC;
    m_axi_ddr2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DDR2_ID_WIDTH-1 downto 0);
    m_axi_ddr2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DDR2_RUSER_WIDTH-1 downto 0);
    m_axi_ddr2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr2_BVALID : IN STD_LOGIC;
    m_axi_ddr2_BREADY : OUT STD_LOGIC;
    m_axi_ddr2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DDR2_ID_WIDTH-1 downto 0);
    m_axi_ddr2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DDR2_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of VecDotProduct is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "VecDotProduct_VecDotProduct,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=34,HLS_SYN_DSP=0,HLS_SYN_FF=3726,HLS_SYN_LUT=5322,HLS_VERSION=2020_1}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal readRep : STD_LOGIC_VECTOR (31 downto 0);
    signal vecA : STD_LOGIC_VECTOR (63 downto 0);
    signal vecB : STD_LOGIC_VECTOR (63 downto 0);
    signal scaC : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ddr0_AWREADY : STD_LOGIC;
    signal ddr0_WREADY : STD_LOGIC;
    signal ddr0_ARREADY : STD_LOGIC;
    signal ddr0_RVALID : STD_LOGIC;
    signal ddr0_RDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal ddr0_RLAST : STD_LOGIC;
    signal ddr0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ddr0_BVALID : STD_LOGIC;
    signal ddr0_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ddr0_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr0_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr1_AWREADY : STD_LOGIC;
    signal ddr1_WREADY : STD_LOGIC;
    signal ddr1_ARREADY : STD_LOGIC;
    signal ddr1_RVALID : STD_LOGIC;
    signal ddr1_RDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal ddr1_RLAST : STD_LOGIC;
    signal ddr1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ddr1_BVALID : STD_LOGIC;
    signal ddr1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ddr1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr2_AWREADY : STD_LOGIC;
    signal ddr2_WREADY : STD_LOGIC;
    signal ddr2_ARREADY : STD_LOGIC;
    signal ddr2_RVALID : STD_LOGIC;
    signal ddr2_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal ddr2_RLAST : STD_LOGIC;
    signal ddr2_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr2_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr2_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ddr2_BVALID : STD_LOGIC;
    signal ddr2_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ddr2_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr2_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal VecDotProduct_entry43_U0_ap_start : STD_LOGIC;
    signal VecDotProduct_entry43_U0_ap_done : STD_LOGIC;
    signal VecDotProduct_entry43_U0_ap_continue : STD_LOGIC;
    signal VecDotProduct_entry43_U0_ap_idle : STD_LOGIC;
    signal VecDotProduct_entry43_U0_ap_ready : STD_LOGIC;
    signal VecDotProduct_entry43_U0_start_out : STD_LOGIC;
    signal VecDotProduct_entry43_U0_start_write : STD_LOGIC;
    signal VecDotProduct_entry43_U0_vecA_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal VecDotProduct_entry43_U0_vecA_out_write : STD_LOGIC;
    signal VecDotProduct_entry43_U0_vecB_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal VecDotProduct_entry43_U0_vecB_out_write : STD_LOGIC;
    signal VecDotProduct_entry43_U0_scaC_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal VecDotProduct_entry43_U0_scaC_out_write : STD_LOGIC;
    signal VecReader_U0_ap_start : STD_LOGIC;
    signal VecReader_U0_ap_done : STD_LOGIC;
    signal VecReader_U0_ap_continue : STD_LOGIC;
    signal VecReader_U0_ap_idle : STD_LOGIC;
    signal VecReader_U0_ap_ready : STD_LOGIC;
    signal VecReader_U0_start_out : STD_LOGIC;
    signal VecReader_U0_start_write : STD_LOGIC;
    signal VecReader_U0_m_axi_ddr0_AWVALID : STD_LOGIC;
    signal VecReader_U0_m_axi_ddr0_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal VecReader_U0_m_axi_ddr0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal VecReader_U0_m_axi_ddr0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal VecReader_U0_m_axi_ddr0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal VecReader_U0_m_axi_ddr0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal VecReader_U0_m_axi_ddr0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal VecReader_U0_m_axi_ddr0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal VecReader_U0_m_axi_ddr0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal VecReader_U0_m_axi_ddr0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal VecReader_U0_m_axi_ddr0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal VecReader_U0_m_axi_ddr0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal VecReader_U0_m_axi_ddr0_WVALID : STD_LOGIC;
    signal VecReader_U0_m_axi_ddr0_WDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal VecReader_U0_m_axi_ddr0_WSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal VecReader_U0_m_axi_ddr0_WLAST : STD_LOGIC;
    signal VecReader_U0_m_axi_ddr0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal VecReader_U0_m_axi_ddr0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal VecReader_U0_m_axi_ddr0_ARVALID : STD_LOGIC;
    signal VecReader_U0_m_axi_ddr0_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal VecReader_U0_m_axi_ddr0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal VecReader_U0_m_axi_ddr0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal VecReader_U0_m_axi_ddr0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal VecReader_U0_m_axi_ddr0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal VecReader_U0_m_axi_ddr0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal VecReader_U0_m_axi_ddr0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal VecReader_U0_m_axi_ddr0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal VecReader_U0_m_axi_ddr0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal VecReader_U0_m_axi_ddr0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal VecReader_U0_m_axi_ddr0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal VecReader_U0_m_axi_ddr0_RREADY : STD_LOGIC;
    signal VecReader_U0_m_axi_ddr0_BREADY : STD_LOGIC;
    signal VecReader_U0_fifoA21_din : STD_LOGIC_VECTOR (127 downto 0);
    signal VecReader_U0_fifoA21_write : STD_LOGIC;
    signal VecReader_U0_ddr_read : STD_LOGIC;
    signal VecReader1_U0_ap_start : STD_LOGIC;
    signal VecReader1_U0_ap_done : STD_LOGIC;
    signal VecReader1_U0_ap_continue : STD_LOGIC;
    signal VecReader1_U0_ap_idle : STD_LOGIC;
    signal VecReader1_U0_ap_ready : STD_LOGIC;
    signal VecReader1_U0_m_axi_ddr0_AWVALID : STD_LOGIC;
    signal VecReader1_U0_m_axi_ddr0_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal VecReader1_U0_m_axi_ddr0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal VecReader1_U0_m_axi_ddr0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal VecReader1_U0_m_axi_ddr0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal VecReader1_U0_m_axi_ddr0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal VecReader1_U0_m_axi_ddr0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal VecReader1_U0_m_axi_ddr0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal VecReader1_U0_m_axi_ddr0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal VecReader1_U0_m_axi_ddr0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal VecReader1_U0_m_axi_ddr0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal VecReader1_U0_m_axi_ddr0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal VecReader1_U0_m_axi_ddr0_WVALID : STD_LOGIC;
    signal VecReader1_U0_m_axi_ddr0_WDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal VecReader1_U0_m_axi_ddr0_WSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal VecReader1_U0_m_axi_ddr0_WLAST : STD_LOGIC;
    signal VecReader1_U0_m_axi_ddr0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal VecReader1_U0_m_axi_ddr0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal VecReader1_U0_m_axi_ddr0_ARVALID : STD_LOGIC;
    signal VecReader1_U0_m_axi_ddr0_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal VecReader1_U0_m_axi_ddr0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal VecReader1_U0_m_axi_ddr0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal VecReader1_U0_m_axi_ddr0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal VecReader1_U0_m_axi_ddr0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal VecReader1_U0_m_axi_ddr0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal VecReader1_U0_m_axi_ddr0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal VecReader1_U0_m_axi_ddr0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal VecReader1_U0_m_axi_ddr0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal VecReader1_U0_m_axi_ddr0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal VecReader1_U0_m_axi_ddr0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal VecReader1_U0_m_axi_ddr0_RREADY : STD_LOGIC;
    signal VecReader1_U0_m_axi_ddr0_BREADY : STD_LOGIC;
    signal VecReader1_U0_fifoA21_din : STD_LOGIC_VECTOR (127 downto 0);
    signal VecReader1_U0_fifoA21_write : STD_LOGIC;
    signal VecReader1_U0_ddr_read : STD_LOGIC;
    signal EWiseMultipiler_U0_ap_start : STD_LOGIC;
    signal EWiseMultipiler_U0_ap_done : STD_LOGIC;
    signal EWiseMultipiler_U0_ap_continue : STD_LOGIC;
    signal EWiseMultipiler_U0_ap_idle : STD_LOGIC;
    signal EWiseMultipiler_U0_ap_ready : STD_LOGIC;
    signal EWiseMultipiler_U0_start_out : STD_LOGIC;
    signal EWiseMultipiler_U0_start_write : STD_LOGIC;
    signal EWiseMultipiler_U0_fifoA21_read : STD_LOGIC;
    signal EWiseMultipiler_U0_fifoB22_read : STD_LOGIC;
    signal EWiseMultipiler_U0_fifoC123_din : STD_LOGIC_VECTOR (255 downto 0);
    signal EWiseMultipiler_U0_fifoC123_write : STD_LOGIC;
    signal AdderTree_U0_ap_start : STD_LOGIC;
    signal AdderTree_U0_ap_done : STD_LOGIC;
    signal AdderTree_U0_ap_continue : STD_LOGIC;
    signal AdderTree_U0_ap_idle : STD_LOGIC;
    signal AdderTree_U0_ap_ready : STD_LOGIC;
    signal AdderTree_U0_start_out : STD_LOGIC;
    signal AdderTree_U0_start_write : STD_LOGIC;
    signal AdderTree_U0_fifoC123_read : STD_LOGIC;
    signal AdderTree_U0_fifoC224_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AdderTree_U0_fifoC224_write : STD_LOGIC;
    signal Accumulator_U0_ap_start : STD_LOGIC;
    signal Accumulator_U0_ap_done : STD_LOGIC;
    signal Accumulator_U0_ap_continue : STD_LOGIC;
    signal Accumulator_U0_ap_idle : STD_LOGIC;
    signal Accumulator_U0_ap_ready : STD_LOGIC;
    signal Accumulator_U0_fifoC224_read : STD_LOGIC;
    signal Accumulator_U0_fifoC325_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Accumulator_U0_fifoC325_write : STD_LOGIC;
    signal ScaWriter_U0_ap_start : STD_LOGIC;
    signal ScaWriter_U0_ap_done : STD_LOGIC;
    signal ScaWriter_U0_ap_continue : STD_LOGIC;
    signal ScaWriter_U0_ap_idle : STD_LOGIC;
    signal ScaWriter_U0_ap_ready : STD_LOGIC;
    signal ScaWriter_U0_fifoC325_read : STD_LOGIC;
    signal ScaWriter_U0_m_axi_ddr2_AWVALID : STD_LOGIC;
    signal ScaWriter_U0_m_axi_ddr2_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal ScaWriter_U0_m_axi_ddr2_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal ScaWriter_U0_m_axi_ddr2_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal ScaWriter_U0_m_axi_ddr2_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal ScaWriter_U0_m_axi_ddr2_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal ScaWriter_U0_m_axi_ddr2_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal ScaWriter_U0_m_axi_ddr2_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal ScaWriter_U0_m_axi_ddr2_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal ScaWriter_U0_m_axi_ddr2_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal ScaWriter_U0_m_axi_ddr2_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal ScaWriter_U0_m_axi_ddr2_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ScaWriter_U0_m_axi_ddr2_WVALID : STD_LOGIC;
    signal ScaWriter_U0_m_axi_ddr2_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal ScaWriter_U0_m_axi_ddr2_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal ScaWriter_U0_m_axi_ddr2_WLAST : STD_LOGIC;
    signal ScaWriter_U0_m_axi_ddr2_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal ScaWriter_U0_m_axi_ddr2_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ScaWriter_U0_m_axi_ddr2_ARVALID : STD_LOGIC;
    signal ScaWriter_U0_m_axi_ddr2_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal ScaWriter_U0_m_axi_ddr2_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal ScaWriter_U0_m_axi_ddr2_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal ScaWriter_U0_m_axi_ddr2_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal ScaWriter_U0_m_axi_ddr2_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal ScaWriter_U0_m_axi_ddr2_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal ScaWriter_U0_m_axi_ddr2_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal ScaWriter_U0_m_axi_ddr2_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal ScaWriter_U0_m_axi_ddr2_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal ScaWriter_U0_m_axi_ddr2_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal ScaWriter_U0_m_axi_ddr2_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ScaWriter_U0_m_axi_ddr2_RREADY : STD_LOGIC;
    signal ScaWriter_U0_m_axi_ddr2_BREADY : STD_LOGIC;
    signal ScaWriter_U0_ddr_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal vecA_c_full_n : STD_LOGIC;
    signal vecA_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal vecA_c_empty_n : STD_LOGIC;
    signal vecB_c_full_n : STD_LOGIC;
    signal vecB_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal vecB_c_empty_n : STD_LOGIC;
    signal scaC_c_full_n : STD_LOGIC;
    signal scaC_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal scaC_c_empty_n : STD_LOGIC;
    signal fifoA_stream_s_full_n : STD_LOGIC;
    signal fifoA_stream_s_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal fifoA_stream_s_empty_n : STD_LOGIC;
    signal fifoB_stream_s_full_n : STD_LOGIC;
    signal fifoB_stream_s_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal fifoB_stream_s_empty_n : STD_LOGIC;
    signal fifoC1_stream_s_full_n : STD_LOGIC;
    signal fifoC1_stream_s_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal fifoC1_stream_s_empty_n : STD_LOGIC;
    signal fifoC2_stream_s_full_n : STD_LOGIC;
    signal fifoC2_stream_s_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal fifoC2_stream_s_empty_n : STD_LOGIC;
    signal fifoC3_stream_s_full_n : STD_LOGIC;
    signal fifoC3_stream_s_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal fifoC3_stream_s_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_VecDotProduct_entry43_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_VecDotProduct_entry43_U0_ap_ready : STD_LOGIC;
    signal VecDotProduct_entry43_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_VecReader_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_VecReader_U0_ap_ready : STD_LOGIC;
    signal VecReader_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_VecReader1_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_VecReader1_U0_ap_ready : STD_LOGIC;
    signal VecReader1_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal start_for_ScaWriter_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_ScaWriter_U0_full_n : STD_LOGIC;
    signal start_for_ScaWriter_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_ScaWriter_U0_empty_n : STD_LOGIC;
    signal start_for_EWiseMultipiler_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_EWiseMultipiler_U0_full_n : STD_LOGIC;
    signal start_for_EWiseMultipiler_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_EWiseMultipiler_U0_empty_n : STD_LOGIC;
    signal VecReader1_U0_start_full_n : STD_LOGIC;
    signal VecReader1_U0_start_write : STD_LOGIC;
    signal start_for_AdderTree_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_AdderTree_U0_full_n : STD_LOGIC;
    signal start_for_AdderTree_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_AdderTree_U0_empty_n : STD_LOGIC;
    signal start_for_Accumulator_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Accumulator_U0_full_n : STD_LOGIC;
    signal start_for_Accumulator_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Accumulator_U0_empty_n : STD_LOGIC;
    signal Accumulator_U0_start_full_n : STD_LOGIC;
    signal Accumulator_U0_start_write : STD_LOGIC;
    signal ScaWriter_U0_start_full_n : STD_LOGIC;
    signal ScaWriter_U0_start_write : STD_LOGIC;

    component VecDotProduct_VecDotProduct_entry43 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        vecA : IN STD_LOGIC_VECTOR (63 downto 0);
        vecB : IN STD_LOGIC_VECTOR (63 downto 0);
        scaC : IN STD_LOGIC_VECTOR (63 downto 0);
        vecA_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        vecA_out_full_n : IN STD_LOGIC;
        vecA_out_write : OUT STD_LOGIC;
        vecB_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        vecB_out_full_n : IN STD_LOGIC;
        vecB_out_write : OUT STD_LOGIC;
        scaC_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        scaC_out_full_n : IN STD_LOGIC;
        scaC_out_write : OUT STD_LOGIC );
    end component;


    component VecDotProduct_VecReader IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        m_axi_ddr0_AWVALID : OUT STD_LOGIC;
        m_axi_ddr0_AWREADY : IN STD_LOGIC;
        m_axi_ddr0_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr0_WVALID : OUT STD_LOGIC;
        m_axi_ddr0_WREADY : IN STD_LOGIC;
        m_axi_ddr0_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        m_axi_ddr0_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_ddr0_WLAST : OUT STD_LOGIC;
        m_axi_ddr0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr0_ARVALID : OUT STD_LOGIC;
        m_axi_ddr0_ARREADY : IN STD_LOGIC;
        m_axi_ddr0_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr0_RVALID : IN STD_LOGIC;
        m_axi_ddr0_RREADY : OUT STD_LOGIC;
        m_axi_ddr0_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        m_axi_ddr0_RLAST : IN STD_LOGIC;
        m_axi_ddr0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr0_BVALID : IN STD_LOGIC;
        m_axi_ddr0_BREADY : OUT STD_LOGIC;
        m_axi_ddr0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        fifoA21_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        fifoA21_full_n : IN STD_LOGIC;
        fifoA21_write : OUT STD_LOGIC;
        ddr_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        ddr_empty_n : IN STD_LOGIC;
        ddr_read : OUT STD_LOGIC;
        readRep : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component VecDotProduct_VecReader1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_ddr0_AWVALID : OUT STD_LOGIC;
        m_axi_ddr0_AWREADY : IN STD_LOGIC;
        m_axi_ddr0_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr0_WVALID : OUT STD_LOGIC;
        m_axi_ddr0_WREADY : IN STD_LOGIC;
        m_axi_ddr0_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        m_axi_ddr0_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_ddr0_WLAST : OUT STD_LOGIC;
        m_axi_ddr0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr0_ARVALID : OUT STD_LOGIC;
        m_axi_ddr0_ARREADY : IN STD_LOGIC;
        m_axi_ddr0_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr0_RVALID : IN STD_LOGIC;
        m_axi_ddr0_RREADY : OUT STD_LOGIC;
        m_axi_ddr0_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        m_axi_ddr0_RLAST : IN STD_LOGIC;
        m_axi_ddr0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr0_BVALID : IN STD_LOGIC;
        m_axi_ddr0_BREADY : OUT STD_LOGIC;
        m_axi_ddr0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        fifoA21_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        fifoA21_full_n : IN STD_LOGIC;
        fifoA21_write : OUT STD_LOGIC;
        ddr_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        ddr_empty_n : IN STD_LOGIC;
        ddr_read : OUT STD_LOGIC;
        readRep : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component VecDotProduct_EWiseMultipiler IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        fifoA21_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        fifoA21_empty_n : IN STD_LOGIC;
        fifoA21_read : OUT STD_LOGIC;
        fifoB22_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        fifoB22_empty_n : IN STD_LOGIC;
        fifoB22_read : OUT STD_LOGIC;
        fifoC123_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        fifoC123_full_n : IN STD_LOGIC;
        fifoC123_write : OUT STD_LOGIC;
        readRep : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component VecDotProduct_AdderTree IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        fifoC123_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        fifoC123_empty_n : IN STD_LOGIC;
        fifoC123_read : OUT STD_LOGIC;
        fifoC224_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        fifoC224_full_n : IN STD_LOGIC;
        fifoC224_write : OUT STD_LOGIC;
        readRep : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component VecDotProduct_Accumulator IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fifoC224_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fifoC224_empty_n : IN STD_LOGIC;
        fifoC224_read : OUT STD_LOGIC;
        fifoC325_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        fifoC325_full_n : IN STD_LOGIC;
        fifoC325_write : OUT STD_LOGIC;
        readRep : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component VecDotProduct_ScaWriter IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fifoC325_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fifoC325_empty_n : IN STD_LOGIC;
        fifoC325_read : OUT STD_LOGIC;
        m_axi_ddr2_AWVALID : OUT STD_LOGIC;
        m_axi_ddr2_AWREADY : IN STD_LOGIC;
        m_axi_ddr2_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr2_WVALID : OUT STD_LOGIC;
        m_axi_ddr2_WREADY : IN STD_LOGIC;
        m_axi_ddr2_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr2_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr2_WLAST : OUT STD_LOGIC;
        m_axi_ddr2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr2_ARVALID : OUT STD_LOGIC;
        m_axi_ddr2_ARREADY : IN STD_LOGIC;
        m_axi_ddr2_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ddr2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ddr2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr2_RVALID : IN STD_LOGIC;
        m_axi_ddr2_RREADY : OUT STD_LOGIC;
        m_axi_ddr2_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ddr2_RLAST : IN STD_LOGIC;
        m_axi_ddr2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr2_BVALID : IN STD_LOGIC;
        m_axi_ddr2_BREADY : OUT STD_LOGIC;
        m_axi_ddr2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ddr2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ddr2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        ddr_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        ddr_empty_n : IN STD_LOGIC;
        ddr_read : OUT STD_LOGIC );
    end component;


    component VecDotProduct_fifo_w64_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component VecDotProduct_fifo_w64_d6_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component VecDotProduct_fifo_w128_d16_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (127 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (127 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component VecDotProduct_fifo_w256_d16_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (255 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (255 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component VecDotProduct_fifo_w32_d16_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component VecDotProduct_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component VecDotProduct_start_for_ScaWriter_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component VecDotProduct_start_for_EWiseMultipiler_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component VecDotProduct_start_for_AdderTree_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component VecDotProduct_start_for_Accumulator_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component VecDotProduct_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        readRep : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component VecDotProduct_control_r_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        vecA : OUT STD_LOGIC_VECTOR (63 downto 0);
        vecB : OUT STD_LOGIC_VECTOR (63 downto 0);
        scaC : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component VecDotProduct_ddr0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component VecDotProduct_ddr1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component VecDotProduct_ddr2_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    control_s_axi_U : component VecDotProduct_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        readRep => readRep);

    control_r_s_axi_U : component VecDotProduct_control_r_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_R_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_R_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_r_AWVALID,
        AWREADY => s_axi_control_r_AWREADY,
        AWADDR => s_axi_control_r_AWADDR,
        WVALID => s_axi_control_r_WVALID,
        WREADY => s_axi_control_r_WREADY,
        WDATA => s_axi_control_r_WDATA,
        WSTRB => s_axi_control_r_WSTRB,
        ARVALID => s_axi_control_r_ARVALID,
        ARREADY => s_axi_control_r_ARREADY,
        ARADDR => s_axi_control_r_ARADDR,
        RVALID => s_axi_control_r_RVALID,
        RREADY => s_axi_control_r_RREADY,
        RDATA => s_axi_control_r_RDATA,
        RRESP => s_axi_control_r_RRESP,
        BVALID => s_axi_control_r_BVALID,
        BREADY => s_axi_control_r_BREADY,
        BRESP => s_axi_control_r_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        vecA => vecA,
        vecB => vecB,
        scaC => scaC,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    ddr0_m_axi_U : component VecDotProduct_ddr0_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 128,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DDR0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DDR0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DDR0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DDR0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DDR0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DDR0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DDR0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DDR0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DDR0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DDR0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DDR0_CACHE_VALUE)
    port map (
        AWVALID => m_axi_ddr0_AWVALID,
        AWREADY => m_axi_ddr0_AWREADY,
        AWADDR => m_axi_ddr0_AWADDR,
        AWID => m_axi_ddr0_AWID,
        AWLEN => m_axi_ddr0_AWLEN,
        AWSIZE => m_axi_ddr0_AWSIZE,
        AWBURST => m_axi_ddr0_AWBURST,
        AWLOCK => m_axi_ddr0_AWLOCK,
        AWCACHE => m_axi_ddr0_AWCACHE,
        AWPROT => m_axi_ddr0_AWPROT,
        AWQOS => m_axi_ddr0_AWQOS,
        AWREGION => m_axi_ddr0_AWREGION,
        AWUSER => m_axi_ddr0_AWUSER,
        WVALID => m_axi_ddr0_WVALID,
        WREADY => m_axi_ddr0_WREADY,
        WDATA => m_axi_ddr0_WDATA,
        WSTRB => m_axi_ddr0_WSTRB,
        WLAST => m_axi_ddr0_WLAST,
        WID => m_axi_ddr0_WID,
        WUSER => m_axi_ddr0_WUSER,
        ARVALID => m_axi_ddr0_ARVALID,
        ARREADY => m_axi_ddr0_ARREADY,
        ARADDR => m_axi_ddr0_ARADDR,
        ARID => m_axi_ddr0_ARID,
        ARLEN => m_axi_ddr0_ARLEN,
        ARSIZE => m_axi_ddr0_ARSIZE,
        ARBURST => m_axi_ddr0_ARBURST,
        ARLOCK => m_axi_ddr0_ARLOCK,
        ARCACHE => m_axi_ddr0_ARCACHE,
        ARPROT => m_axi_ddr0_ARPROT,
        ARQOS => m_axi_ddr0_ARQOS,
        ARREGION => m_axi_ddr0_ARREGION,
        ARUSER => m_axi_ddr0_ARUSER,
        RVALID => m_axi_ddr0_RVALID,
        RREADY => m_axi_ddr0_RREADY,
        RDATA => m_axi_ddr0_RDATA,
        RLAST => m_axi_ddr0_RLAST,
        RID => m_axi_ddr0_RID,
        RUSER => m_axi_ddr0_RUSER,
        RRESP => m_axi_ddr0_RRESP,
        BVALID => m_axi_ddr0_BVALID,
        BREADY => m_axi_ddr0_BREADY,
        BRESP => m_axi_ddr0_BRESP,
        BID => m_axi_ddr0_BID,
        BUSER => m_axi_ddr0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => VecReader_U0_m_axi_ddr0_ARVALID,
        I_ARREADY => ddr0_ARREADY,
        I_ARADDR => VecReader_U0_m_axi_ddr0_ARADDR,
        I_ARID => VecReader_U0_m_axi_ddr0_ARID,
        I_ARLEN => VecReader_U0_m_axi_ddr0_ARLEN,
        I_ARSIZE => VecReader_U0_m_axi_ddr0_ARSIZE,
        I_ARLOCK => VecReader_U0_m_axi_ddr0_ARLOCK,
        I_ARCACHE => VecReader_U0_m_axi_ddr0_ARCACHE,
        I_ARQOS => VecReader_U0_m_axi_ddr0_ARQOS,
        I_ARPROT => VecReader_U0_m_axi_ddr0_ARPROT,
        I_ARUSER => VecReader_U0_m_axi_ddr0_ARUSER,
        I_ARBURST => VecReader_U0_m_axi_ddr0_ARBURST,
        I_ARREGION => VecReader_U0_m_axi_ddr0_ARREGION,
        I_RVALID => ddr0_RVALID,
        I_RREADY => VecReader_U0_m_axi_ddr0_RREADY,
        I_RDATA => ddr0_RDATA,
        I_RID => ddr0_RID,
        I_RUSER => ddr0_RUSER,
        I_RRESP => ddr0_RRESP,
        I_RLAST => ddr0_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => ddr0_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => ddr0_WREADY,
        I_WDATA => ap_const_lv128_lc_1,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv16_0,
        I_BVALID => ddr0_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => ddr0_BRESP,
        I_BID => ddr0_BID,
        I_BUSER => ddr0_BUSER);

    ddr1_m_axi_U : component VecDotProduct_ddr1_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 128,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DDR1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DDR1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DDR1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DDR1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DDR1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DDR1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DDR1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DDR1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DDR1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DDR1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DDR1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_ddr1_AWVALID,
        AWREADY => m_axi_ddr1_AWREADY,
        AWADDR => m_axi_ddr1_AWADDR,
        AWID => m_axi_ddr1_AWID,
        AWLEN => m_axi_ddr1_AWLEN,
        AWSIZE => m_axi_ddr1_AWSIZE,
        AWBURST => m_axi_ddr1_AWBURST,
        AWLOCK => m_axi_ddr1_AWLOCK,
        AWCACHE => m_axi_ddr1_AWCACHE,
        AWPROT => m_axi_ddr1_AWPROT,
        AWQOS => m_axi_ddr1_AWQOS,
        AWREGION => m_axi_ddr1_AWREGION,
        AWUSER => m_axi_ddr1_AWUSER,
        WVALID => m_axi_ddr1_WVALID,
        WREADY => m_axi_ddr1_WREADY,
        WDATA => m_axi_ddr1_WDATA,
        WSTRB => m_axi_ddr1_WSTRB,
        WLAST => m_axi_ddr1_WLAST,
        WID => m_axi_ddr1_WID,
        WUSER => m_axi_ddr1_WUSER,
        ARVALID => m_axi_ddr1_ARVALID,
        ARREADY => m_axi_ddr1_ARREADY,
        ARADDR => m_axi_ddr1_ARADDR,
        ARID => m_axi_ddr1_ARID,
        ARLEN => m_axi_ddr1_ARLEN,
        ARSIZE => m_axi_ddr1_ARSIZE,
        ARBURST => m_axi_ddr1_ARBURST,
        ARLOCK => m_axi_ddr1_ARLOCK,
        ARCACHE => m_axi_ddr1_ARCACHE,
        ARPROT => m_axi_ddr1_ARPROT,
        ARQOS => m_axi_ddr1_ARQOS,
        ARREGION => m_axi_ddr1_ARREGION,
        ARUSER => m_axi_ddr1_ARUSER,
        RVALID => m_axi_ddr1_RVALID,
        RREADY => m_axi_ddr1_RREADY,
        RDATA => m_axi_ddr1_RDATA,
        RLAST => m_axi_ddr1_RLAST,
        RID => m_axi_ddr1_RID,
        RUSER => m_axi_ddr1_RUSER,
        RRESP => m_axi_ddr1_RRESP,
        BVALID => m_axi_ddr1_BVALID,
        BREADY => m_axi_ddr1_BREADY,
        BRESP => m_axi_ddr1_BRESP,
        BID => m_axi_ddr1_BID,
        BUSER => m_axi_ddr1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => VecReader1_U0_m_axi_ddr0_ARVALID,
        I_ARREADY => ddr1_ARREADY,
        I_ARADDR => VecReader1_U0_m_axi_ddr0_ARADDR,
        I_ARID => VecReader1_U0_m_axi_ddr0_ARID,
        I_ARLEN => VecReader1_U0_m_axi_ddr0_ARLEN,
        I_ARSIZE => VecReader1_U0_m_axi_ddr0_ARSIZE,
        I_ARLOCK => VecReader1_U0_m_axi_ddr0_ARLOCK,
        I_ARCACHE => VecReader1_U0_m_axi_ddr0_ARCACHE,
        I_ARQOS => VecReader1_U0_m_axi_ddr0_ARQOS,
        I_ARPROT => VecReader1_U0_m_axi_ddr0_ARPROT,
        I_ARUSER => VecReader1_U0_m_axi_ddr0_ARUSER,
        I_ARBURST => VecReader1_U0_m_axi_ddr0_ARBURST,
        I_ARREGION => VecReader1_U0_m_axi_ddr0_ARREGION,
        I_RVALID => ddr1_RVALID,
        I_RREADY => VecReader1_U0_m_axi_ddr0_RREADY,
        I_RDATA => ddr1_RDATA,
        I_RID => ddr1_RID,
        I_RUSER => ddr1_RUSER,
        I_RRESP => ddr1_RRESP,
        I_RLAST => ddr1_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => ddr1_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => ddr1_WREADY,
        I_WDATA => ap_const_lv128_lc_1,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv16_0,
        I_BVALID => ddr1_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => ddr1_BRESP,
        I_BID => ddr1_BID,
        I_BUSER => ddr1_BUSER);

    ddr2_m_axi_U : component VecDotProduct_ddr2_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DDR2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DDR2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DDR2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DDR2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DDR2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DDR2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DDR2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DDR2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DDR2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DDR2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DDR2_CACHE_VALUE)
    port map (
        AWVALID => m_axi_ddr2_AWVALID,
        AWREADY => m_axi_ddr2_AWREADY,
        AWADDR => m_axi_ddr2_AWADDR,
        AWID => m_axi_ddr2_AWID,
        AWLEN => m_axi_ddr2_AWLEN,
        AWSIZE => m_axi_ddr2_AWSIZE,
        AWBURST => m_axi_ddr2_AWBURST,
        AWLOCK => m_axi_ddr2_AWLOCK,
        AWCACHE => m_axi_ddr2_AWCACHE,
        AWPROT => m_axi_ddr2_AWPROT,
        AWQOS => m_axi_ddr2_AWQOS,
        AWREGION => m_axi_ddr2_AWREGION,
        AWUSER => m_axi_ddr2_AWUSER,
        WVALID => m_axi_ddr2_WVALID,
        WREADY => m_axi_ddr2_WREADY,
        WDATA => m_axi_ddr2_WDATA,
        WSTRB => m_axi_ddr2_WSTRB,
        WLAST => m_axi_ddr2_WLAST,
        WID => m_axi_ddr2_WID,
        WUSER => m_axi_ddr2_WUSER,
        ARVALID => m_axi_ddr2_ARVALID,
        ARREADY => m_axi_ddr2_ARREADY,
        ARADDR => m_axi_ddr2_ARADDR,
        ARID => m_axi_ddr2_ARID,
        ARLEN => m_axi_ddr2_ARLEN,
        ARSIZE => m_axi_ddr2_ARSIZE,
        ARBURST => m_axi_ddr2_ARBURST,
        ARLOCK => m_axi_ddr2_ARLOCK,
        ARCACHE => m_axi_ddr2_ARCACHE,
        ARPROT => m_axi_ddr2_ARPROT,
        ARQOS => m_axi_ddr2_ARQOS,
        ARREGION => m_axi_ddr2_ARREGION,
        ARUSER => m_axi_ddr2_ARUSER,
        RVALID => m_axi_ddr2_RVALID,
        RREADY => m_axi_ddr2_RREADY,
        RDATA => m_axi_ddr2_RDATA,
        RLAST => m_axi_ddr2_RLAST,
        RID => m_axi_ddr2_RID,
        RUSER => m_axi_ddr2_RUSER,
        RRESP => m_axi_ddr2_RRESP,
        BVALID => m_axi_ddr2_BVALID,
        BREADY => m_axi_ddr2_BREADY,
        BRESP => m_axi_ddr2_BRESP,
        BID => m_axi_ddr2_BID,
        BUSER => m_axi_ddr2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => ddr2_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => ddr2_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => ddr2_RDATA,
        I_RID => ddr2_RID,
        I_RUSER => ddr2_RUSER,
        I_RRESP => ddr2_RRESP,
        I_RLAST => ddr2_RLAST,
        I_AWVALID => ScaWriter_U0_m_axi_ddr2_AWVALID,
        I_AWREADY => ddr2_AWREADY,
        I_AWADDR => ScaWriter_U0_m_axi_ddr2_AWADDR,
        I_AWID => ScaWriter_U0_m_axi_ddr2_AWID,
        I_AWLEN => ScaWriter_U0_m_axi_ddr2_AWLEN,
        I_AWSIZE => ScaWriter_U0_m_axi_ddr2_AWSIZE,
        I_AWLOCK => ScaWriter_U0_m_axi_ddr2_AWLOCK,
        I_AWCACHE => ScaWriter_U0_m_axi_ddr2_AWCACHE,
        I_AWQOS => ScaWriter_U0_m_axi_ddr2_AWQOS,
        I_AWPROT => ScaWriter_U0_m_axi_ddr2_AWPROT,
        I_AWUSER => ScaWriter_U0_m_axi_ddr2_AWUSER,
        I_AWBURST => ScaWriter_U0_m_axi_ddr2_AWBURST,
        I_AWREGION => ScaWriter_U0_m_axi_ddr2_AWREGION,
        I_WVALID => ScaWriter_U0_m_axi_ddr2_WVALID,
        I_WREADY => ddr2_WREADY,
        I_WDATA => ScaWriter_U0_m_axi_ddr2_WDATA,
        I_WID => ScaWriter_U0_m_axi_ddr2_WID,
        I_WUSER => ScaWriter_U0_m_axi_ddr2_WUSER,
        I_WLAST => ScaWriter_U0_m_axi_ddr2_WLAST,
        I_WSTRB => ScaWriter_U0_m_axi_ddr2_WSTRB,
        I_BVALID => ddr2_BVALID,
        I_BREADY => ScaWriter_U0_m_axi_ddr2_BREADY,
        I_BRESP => ddr2_BRESP,
        I_BID => ddr2_BID,
        I_BUSER => ddr2_BUSER);

    VecDotProduct_entry43_U0 : component VecDotProduct_VecDotProduct_entry43
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => VecDotProduct_entry43_U0_ap_start,
        start_full_n => start_for_ScaWriter_U0_full_n,
        ap_done => VecDotProduct_entry43_U0_ap_done,
        ap_continue => VecDotProduct_entry43_U0_ap_continue,
        ap_idle => VecDotProduct_entry43_U0_ap_idle,
        ap_ready => VecDotProduct_entry43_U0_ap_ready,
        start_out => VecDotProduct_entry43_U0_start_out,
        start_write => VecDotProduct_entry43_U0_start_write,
        vecA => vecA,
        vecB => vecB,
        scaC => scaC,
        vecA_out_din => VecDotProduct_entry43_U0_vecA_out_din,
        vecA_out_full_n => vecA_c_full_n,
        vecA_out_write => VecDotProduct_entry43_U0_vecA_out_write,
        vecB_out_din => VecDotProduct_entry43_U0_vecB_out_din,
        vecB_out_full_n => vecB_c_full_n,
        vecB_out_write => VecDotProduct_entry43_U0_vecB_out_write,
        scaC_out_din => VecDotProduct_entry43_U0_scaC_out_din,
        scaC_out_full_n => scaC_c_full_n,
        scaC_out_write => VecDotProduct_entry43_U0_scaC_out_write);

    VecReader_U0 : component VecDotProduct_VecReader
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => VecReader_U0_ap_start,
        start_full_n => start_for_EWiseMultipiler_U0_full_n,
        ap_done => VecReader_U0_ap_done,
        ap_continue => VecReader_U0_ap_continue,
        ap_idle => VecReader_U0_ap_idle,
        ap_ready => VecReader_U0_ap_ready,
        start_out => VecReader_U0_start_out,
        start_write => VecReader_U0_start_write,
        m_axi_ddr0_AWVALID => VecReader_U0_m_axi_ddr0_AWVALID,
        m_axi_ddr0_AWREADY => ap_const_logic_0,
        m_axi_ddr0_AWADDR => VecReader_U0_m_axi_ddr0_AWADDR,
        m_axi_ddr0_AWID => VecReader_U0_m_axi_ddr0_AWID,
        m_axi_ddr0_AWLEN => VecReader_U0_m_axi_ddr0_AWLEN,
        m_axi_ddr0_AWSIZE => VecReader_U0_m_axi_ddr0_AWSIZE,
        m_axi_ddr0_AWBURST => VecReader_U0_m_axi_ddr0_AWBURST,
        m_axi_ddr0_AWLOCK => VecReader_U0_m_axi_ddr0_AWLOCK,
        m_axi_ddr0_AWCACHE => VecReader_U0_m_axi_ddr0_AWCACHE,
        m_axi_ddr0_AWPROT => VecReader_U0_m_axi_ddr0_AWPROT,
        m_axi_ddr0_AWQOS => VecReader_U0_m_axi_ddr0_AWQOS,
        m_axi_ddr0_AWREGION => VecReader_U0_m_axi_ddr0_AWREGION,
        m_axi_ddr0_AWUSER => VecReader_U0_m_axi_ddr0_AWUSER,
        m_axi_ddr0_WVALID => VecReader_U0_m_axi_ddr0_WVALID,
        m_axi_ddr0_WREADY => ap_const_logic_0,
        m_axi_ddr0_WDATA => VecReader_U0_m_axi_ddr0_WDATA,
        m_axi_ddr0_WSTRB => VecReader_U0_m_axi_ddr0_WSTRB,
        m_axi_ddr0_WLAST => VecReader_U0_m_axi_ddr0_WLAST,
        m_axi_ddr0_WID => VecReader_U0_m_axi_ddr0_WID,
        m_axi_ddr0_WUSER => VecReader_U0_m_axi_ddr0_WUSER,
        m_axi_ddr0_ARVALID => VecReader_U0_m_axi_ddr0_ARVALID,
        m_axi_ddr0_ARREADY => ddr0_ARREADY,
        m_axi_ddr0_ARADDR => VecReader_U0_m_axi_ddr0_ARADDR,
        m_axi_ddr0_ARID => VecReader_U0_m_axi_ddr0_ARID,
        m_axi_ddr0_ARLEN => VecReader_U0_m_axi_ddr0_ARLEN,
        m_axi_ddr0_ARSIZE => VecReader_U0_m_axi_ddr0_ARSIZE,
        m_axi_ddr0_ARBURST => VecReader_U0_m_axi_ddr0_ARBURST,
        m_axi_ddr0_ARLOCK => VecReader_U0_m_axi_ddr0_ARLOCK,
        m_axi_ddr0_ARCACHE => VecReader_U0_m_axi_ddr0_ARCACHE,
        m_axi_ddr0_ARPROT => VecReader_U0_m_axi_ddr0_ARPROT,
        m_axi_ddr0_ARQOS => VecReader_U0_m_axi_ddr0_ARQOS,
        m_axi_ddr0_ARREGION => VecReader_U0_m_axi_ddr0_ARREGION,
        m_axi_ddr0_ARUSER => VecReader_U0_m_axi_ddr0_ARUSER,
        m_axi_ddr0_RVALID => ddr0_RVALID,
        m_axi_ddr0_RREADY => VecReader_U0_m_axi_ddr0_RREADY,
        m_axi_ddr0_RDATA => ddr0_RDATA,
        m_axi_ddr0_RLAST => ddr0_RLAST,
        m_axi_ddr0_RID => ddr0_RID,
        m_axi_ddr0_RUSER => ddr0_RUSER,
        m_axi_ddr0_RRESP => ddr0_RRESP,
        m_axi_ddr0_BVALID => ap_const_logic_0,
        m_axi_ddr0_BREADY => VecReader_U0_m_axi_ddr0_BREADY,
        m_axi_ddr0_BRESP => ap_const_lv2_0,
        m_axi_ddr0_BID => ap_const_lv1_0,
        m_axi_ddr0_BUSER => ap_const_lv1_0,
        fifoA21_din => VecReader_U0_fifoA21_din,
        fifoA21_full_n => fifoA_stream_s_full_n,
        fifoA21_write => VecReader_U0_fifoA21_write,
        ddr_dout => vecA_c_dout,
        ddr_empty_n => vecA_c_empty_n,
        ddr_read => VecReader_U0_ddr_read,
        readRep => readRep);

    VecReader1_U0 : component VecDotProduct_VecReader1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => VecReader1_U0_ap_start,
        ap_done => VecReader1_U0_ap_done,
        ap_continue => VecReader1_U0_ap_continue,
        ap_idle => VecReader1_U0_ap_idle,
        ap_ready => VecReader1_U0_ap_ready,
        m_axi_ddr0_AWVALID => VecReader1_U0_m_axi_ddr0_AWVALID,
        m_axi_ddr0_AWREADY => ap_const_logic_0,
        m_axi_ddr0_AWADDR => VecReader1_U0_m_axi_ddr0_AWADDR,
        m_axi_ddr0_AWID => VecReader1_U0_m_axi_ddr0_AWID,
        m_axi_ddr0_AWLEN => VecReader1_U0_m_axi_ddr0_AWLEN,
        m_axi_ddr0_AWSIZE => VecReader1_U0_m_axi_ddr0_AWSIZE,
        m_axi_ddr0_AWBURST => VecReader1_U0_m_axi_ddr0_AWBURST,
        m_axi_ddr0_AWLOCK => VecReader1_U0_m_axi_ddr0_AWLOCK,
        m_axi_ddr0_AWCACHE => VecReader1_U0_m_axi_ddr0_AWCACHE,
        m_axi_ddr0_AWPROT => VecReader1_U0_m_axi_ddr0_AWPROT,
        m_axi_ddr0_AWQOS => VecReader1_U0_m_axi_ddr0_AWQOS,
        m_axi_ddr0_AWREGION => VecReader1_U0_m_axi_ddr0_AWREGION,
        m_axi_ddr0_AWUSER => VecReader1_U0_m_axi_ddr0_AWUSER,
        m_axi_ddr0_WVALID => VecReader1_U0_m_axi_ddr0_WVALID,
        m_axi_ddr0_WREADY => ap_const_logic_0,
        m_axi_ddr0_WDATA => VecReader1_U0_m_axi_ddr0_WDATA,
        m_axi_ddr0_WSTRB => VecReader1_U0_m_axi_ddr0_WSTRB,
        m_axi_ddr0_WLAST => VecReader1_U0_m_axi_ddr0_WLAST,
        m_axi_ddr0_WID => VecReader1_U0_m_axi_ddr0_WID,
        m_axi_ddr0_WUSER => VecReader1_U0_m_axi_ddr0_WUSER,
        m_axi_ddr0_ARVALID => VecReader1_U0_m_axi_ddr0_ARVALID,
        m_axi_ddr0_ARREADY => ddr1_ARREADY,
        m_axi_ddr0_ARADDR => VecReader1_U0_m_axi_ddr0_ARADDR,
        m_axi_ddr0_ARID => VecReader1_U0_m_axi_ddr0_ARID,
        m_axi_ddr0_ARLEN => VecReader1_U0_m_axi_ddr0_ARLEN,
        m_axi_ddr0_ARSIZE => VecReader1_U0_m_axi_ddr0_ARSIZE,
        m_axi_ddr0_ARBURST => VecReader1_U0_m_axi_ddr0_ARBURST,
        m_axi_ddr0_ARLOCK => VecReader1_U0_m_axi_ddr0_ARLOCK,
        m_axi_ddr0_ARCACHE => VecReader1_U0_m_axi_ddr0_ARCACHE,
        m_axi_ddr0_ARPROT => VecReader1_U0_m_axi_ddr0_ARPROT,
        m_axi_ddr0_ARQOS => VecReader1_U0_m_axi_ddr0_ARQOS,
        m_axi_ddr0_ARREGION => VecReader1_U0_m_axi_ddr0_ARREGION,
        m_axi_ddr0_ARUSER => VecReader1_U0_m_axi_ddr0_ARUSER,
        m_axi_ddr0_RVALID => ddr1_RVALID,
        m_axi_ddr0_RREADY => VecReader1_U0_m_axi_ddr0_RREADY,
        m_axi_ddr0_RDATA => ddr1_RDATA,
        m_axi_ddr0_RLAST => ddr1_RLAST,
        m_axi_ddr0_RID => ddr1_RID,
        m_axi_ddr0_RUSER => ddr1_RUSER,
        m_axi_ddr0_RRESP => ddr1_RRESP,
        m_axi_ddr0_BVALID => ap_const_logic_0,
        m_axi_ddr0_BREADY => VecReader1_U0_m_axi_ddr0_BREADY,
        m_axi_ddr0_BRESP => ap_const_lv2_0,
        m_axi_ddr0_BID => ap_const_lv1_0,
        m_axi_ddr0_BUSER => ap_const_lv1_0,
        fifoA21_din => VecReader1_U0_fifoA21_din,
        fifoA21_full_n => fifoB_stream_s_full_n,
        fifoA21_write => VecReader1_U0_fifoA21_write,
        ddr_dout => vecB_c_dout,
        ddr_empty_n => vecB_c_empty_n,
        ddr_read => VecReader1_U0_ddr_read,
        readRep => readRep);

    EWiseMultipiler_U0 : component VecDotProduct_EWiseMultipiler
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => EWiseMultipiler_U0_ap_start,
        start_full_n => start_for_AdderTree_U0_full_n,
        ap_done => EWiseMultipiler_U0_ap_done,
        ap_continue => EWiseMultipiler_U0_ap_continue,
        ap_idle => EWiseMultipiler_U0_ap_idle,
        ap_ready => EWiseMultipiler_U0_ap_ready,
        start_out => EWiseMultipiler_U0_start_out,
        start_write => EWiseMultipiler_U0_start_write,
        fifoA21_dout => fifoA_stream_s_dout,
        fifoA21_empty_n => fifoA_stream_s_empty_n,
        fifoA21_read => EWiseMultipiler_U0_fifoA21_read,
        fifoB22_dout => fifoB_stream_s_dout,
        fifoB22_empty_n => fifoB_stream_s_empty_n,
        fifoB22_read => EWiseMultipiler_U0_fifoB22_read,
        fifoC123_din => EWiseMultipiler_U0_fifoC123_din,
        fifoC123_full_n => fifoC1_stream_s_full_n,
        fifoC123_write => EWiseMultipiler_U0_fifoC123_write,
        readRep => readRep);

    AdderTree_U0 : component VecDotProduct_AdderTree
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AdderTree_U0_ap_start,
        start_full_n => start_for_Accumulator_U0_full_n,
        ap_done => AdderTree_U0_ap_done,
        ap_continue => AdderTree_U0_ap_continue,
        ap_idle => AdderTree_U0_ap_idle,
        ap_ready => AdderTree_U0_ap_ready,
        start_out => AdderTree_U0_start_out,
        start_write => AdderTree_U0_start_write,
        fifoC123_dout => fifoC1_stream_s_dout,
        fifoC123_empty_n => fifoC1_stream_s_empty_n,
        fifoC123_read => AdderTree_U0_fifoC123_read,
        fifoC224_din => AdderTree_U0_fifoC224_din,
        fifoC224_full_n => fifoC2_stream_s_full_n,
        fifoC224_write => AdderTree_U0_fifoC224_write,
        readRep => readRep);

    Accumulator_U0 : component VecDotProduct_Accumulator
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Accumulator_U0_ap_start,
        ap_done => Accumulator_U0_ap_done,
        ap_continue => Accumulator_U0_ap_continue,
        ap_idle => Accumulator_U0_ap_idle,
        ap_ready => Accumulator_U0_ap_ready,
        fifoC224_dout => fifoC2_stream_s_dout,
        fifoC224_empty_n => fifoC2_stream_s_empty_n,
        fifoC224_read => Accumulator_U0_fifoC224_read,
        fifoC325_din => Accumulator_U0_fifoC325_din,
        fifoC325_full_n => fifoC3_stream_s_full_n,
        fifoC325_write => Accumulator_U0_fifoC325_write,
        readRep => readRep);

    ScaWriter_U0 : component VecDotProduct_ScaWriter
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ScaWriter_U0_ap_start,
        ap_done => ScaWriter_U0_ap_done,
        ap_continue => ScaWriter_U0_ap_continue,
        ap_idle => ScaWriter_U0_ap_idle,
        ap_ready => ScaWriter_U0_ap_ready,
        fifoC325_dout => fifoC3_stream_s_dout,
        fifoC325_empty_n => fifoC3_stream_s_empty_n,
        fifoC325_read => ScaWriter_U0_fifoC325_read,
        m_axi_ddr2_AWVALID => ScaWriter_U0_m_axi_ddr2_AWVALID,
        m_axi_ddr2_AWREADY => ddr2_AWREADY,
        m_axi_ddr2_AWADDR => ScaWriter_U0_m_axi_ddr2_AWADDR,
        m_axi_ddr2_AWID => ScaWriter_U0_m_axi_ddr2_AWID,
        m_axi_ddr2_AWLEN => ScaWriter_U0_m_axi_ddr2_AWLEN,
        m_axi_ddr2_AWSIZE => ScaWriter_U0_m_axi_ddr2_AWSIZE,
        m_axi_ddr2_AWBURST => ScaWriter_U0_m_axi_ddr2_AWBURST,
        m_axi_ddr2_AWLOCK => ScaWriter_U0_m_axi_ddr2_AWLOCK,
        m_axi_ddr2_AWCACHE => ScaWriter_U0_m_axi_ddr2_AWCACHE,
        m_axi_ddr2_AWPROT => ScaWriter_U0_m_axi_ddr2_AWPROT,
        m_axi_ddr2_AWQOS => ScaWriter_U0_m_axi_ddr2_AWQOS,
        m_axi_ddr2_AWREGION => ScaWriter_U0_m_axi_ddr2_AWREGION,
        m_axi_ddr2_AWUSER => ScaWriter_U0_m_axi_ddr2_AWUSER,
        m_axi_ddr2_WVALID => ScaWriter_U0_m_axi_ddr2_WVALID,
        m_axi_ddr2_WREADY => ddr2_WREADY,
        m_axi_ddr2_WDATA => ScaWriter_U0_m_axi_ddr2_WDATA,
        m_axi_ddr2_WSTRB => ScaWriter_U0_m_axi_ddr2_WSTRB,
        m_axi_ddr2_WLAST => ScaWriter_U0_m_axi_ddr2_WLAST,
        m_axi_ddr2_WID => ScaWriter_U0_m_axi_ddr2_WID,
        m_axi_ddr2_WUSER => ScaWriter_U0_m_axi_ddr2_WUSER,
        m_axi_ddr2_ARVALID => ScaWriter_U0_m_axi_ddr2_ARVALID,
        m_axi_ddr2_ARREADY => ap_const_logic_0,
        m_axi_ddr2_ARADDR => ScaWriter_U0_m_axi_ddr2_ARADDR,
        m_axi_ddr2_ARID => ScaWriter_U0_m_axi_ddr2_ARID,
        m_axi_ddr2_ARLEN => ScaWriter_U0_m_axi_ddr2_ARLEN,
        m_axi_ddr2_ARSIZE => ScaWriter_U0_m_axi_ddr2_ARSIZE,
        m_axi_ddr2_ARBURST => ScaWriter_U0_m_axi_ddr2_ARBURST,
        m_axi_ddr2_ARLOCK => ScaWriter_U0_m_axi_ddr2_ARLOCK,
        m_axi_ddr2_ARCACHE => ScaWriter_U0_m_axi_ddr2_ARCACHE,
        m_axi_ddr2_ARPROT => ScaWriter_U0_m_axi_ddr2_ARPROT,
        m_axi_ddr2_ARQOS => ScaWriter_U0_m_axi_ddr2_ARQOS,
        m_axi_ddr2_ARREGION => ScaWriter_U0_m_axi_ddr2_ARREGION,
        m_axi_ddr2_ARUSER => ScaWriter_U0_m_axi_ddr2_ARUSER,
        m_axi_ddr2_RVALID => ap_const_logic_0,
        m_axi_ddr2_RREADY => ScaWriter_U0_m_axi_ddr2_RREADY,
        m_axi_ddr2_RDATA => ap_const_lv32_0,
        m_axi_ddr2_RLAST => ap_const_logic_0,
        m_axi_ddr2_RID => ap_const_lv1_0,
        m_axi_ddr2_RUSER => ap_const_lv1_0,
        m_axi_ddr2_RRESP => ap_const_lv2_0,
        m_axi_ddr2_BVALID => ddr2_BVALID,
        m_axi_ddr2_BREADY => ScaWriter_U0_m_axi_ddr2_BREADY,
        m_axi_ddr2_BRESP => ddr2_BRESP,
        m_axi_ddr2_BID => ddr2_BID,
        m_axi_ddr2_BUSER => ddr2_BUSER,
        ddr_dout => scaC_c_dout,
        ddr_empty_n => scaC_c_empty_n,
        ddr_read => ScaWriter_U0_ddr_read);

    vecA_c_U : component VecDotProduct_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => VecDotProduct_entry43_U0_vecA_out_din,
        if_full_n => vecA_c_full_n,
        if_write => VecDotProduct_entry43_U0_vecA_out_write,
        if_dout => vecA_c_dout,
        if_empty_n => vecA_c_empty_n,
        if_read => VecReader_U0_ddr_read);

    vecB_c_U : component VecDotProduct_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => VecDotProduct_entry43_U0_vecB_out_din,
        if_full_n => vecB_c_full_n,
        if_write => VecDotProduct_entry43_U0_vecB_out_write,
        if_dout => vecB_c_dout,
        if_empty_n => vecB_c_empty_n,
        if_read => VecReader1_U0_ddr_read);

    scaC_c_U : component VecDotProduct_fifo_w64_d6_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => VecDotProduct_entry43_U0_scaC_out_din,
        if_full_n => scaC_c_full_n,
        if_write => VecDotProduct_entry43_U0_scaC_out_write,
        if_dout => scaC_c_dout,
        if_empty_n => scaC_c_empty_n,
        if_read => ScaWriter_U0_ddr_read);

    fifoA_stream_s_U : component VecDotProduct_fifo_w128_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => VecReader_U0_fifoA21_din,
        if_full_n => fifoA_stream_s_full_n,
        if_write => VecReader_U0_fifoA21_write,
        if_dout => fifoA_stream_s_dout,
        if_empty_n => fifoA_stream_s_empty_n,
        if_read => EWiseMultipiler_U0_fifoA21_read);

    fifoB_stream_s_U : component VecDotProduct_fifo_w128_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => VecReader1_U0_fifoA21_din,
        if_full_n => fifoB_stream_s_full_n,
        if_write => VecReader1_U0_fifoA21_write,
        if_dout => fifoB_stream_s_dout,
        if_empty_n => fifoB_stream_s_empty_n,
        if_read => EWiseMultipiler_U0_fifoB22_read);

    fifoC1_stream_s_U : component VecDotProduct_fifo_w256_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => EWiseMultipiler_U0_fifoC123_din,
        if_full_n => fifoC1_stream_s_full_n,
        if_write => EWiseMultipiler_U0_fifoC123_write,
        if_dout => fifoC1_stream_s_dout,
        if_empty_n => fifoC1_stream_s_empty_n,
        if_read => AdderTree_U0_fifoC123_read);

    fifoC2_stream_s_U : component VecDotProduct_fifo_w32_d16_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AdderTree_U0_fifoC224_din,
        if_full_n => fifoC2_stream_s_full_n,
        if_write => AdderTree_U0_fifoC224_write,
        if_dout => fifoC2_stream_s_dout,
        if_empty_n => fifoC2_stream_s_empty_n,
        if_read => Accumulator_U0_fifoC224_read);

    fifoC3_stream_s_U : component VecDotProduct_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Accumulator_U0_fifoC325_din,
        if_full_n => fifoC3_stream_s_full_n,
        if_write => Accumulator_U0_fifoC325_write,
        if_dout => fifoC3_stream_s_dout,
        if_empty_n => fifoC3_stream_s_empty_n,
        if_read => ScaWriter_U0_fifoC325_read);

    start_for_ScaWriter_U0_U : component VecDotProduct_start_for_ScaWriter_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_ScaWriter_U0_din,
        if_full_n => start_for_ScaWriter_U0_full_n,
        if_write => VecDotProduct_entry43_U0_start_write,
        if_dout => start_for_ScaWriter_U0_dout,
        if_empty_n => start_for_ScaWriter_U0_empty_n,
        if_read => ScaWriter_U0_ap_ready);

    start_for_EWiseMultipiler_U0_U : component VecDotProduct_start_for_EWiseMultipiler_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_EWiseMultipiler_U0_din,
        if_full_n => start_for_EWiseMultipiler_U0_full_n,
        if_write => VecReader_U0_start_write,
        if_dout => start_for_EWiseMultipiler_U0_dout,
        if_empty_n => start_for_EWiseMultipiler_U0_empty_n,
        if_read => EWiseMultipiler_U0_ap_ready);

    start_for_AdderTree_U0_U : component VecDotProduct_start_for_AdderTree_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_AdderTree_U0_din,
        if_full_n => start_for_AdderTree_U0_full_n,
        if_write => EWiseMultipiler_U0_start_write,
        if_dout => start_for_AdderTree_U0_dout,
        if_empty_n => start_for_AdderTree_U0_empty_n,
        if_read => AdderTree_U0_ap_ready);

    start_for_Accumulator_U0_U : component VecDotProduct_start_for_Accumulator_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Accumulator_U0_din,
        if_full_n => start_for_Accumulator_U0_full_n,
        if_write => AdderTree_U0_start_write,
        if_dout => start_for_Accumulator_U0_dout,
        if_empty_n => start_for_Accumulator_U0_empty_n,
        if_read => Accumulator_U0_ap_ready);





    ap_sync_reg_VecDotProduct_entry43_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_VecDotProduct_entry43_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_VecDotProduct_entry43_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_VecDotProduct_entry43_U0_ap_ready <= ap_sync_VecDotProduct_entry43_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_VecReader1_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_VecReader1_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_VecReader1_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_VecReader1_U0_ap_ready <= ap_sync_VecReader1_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_VecReader_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_VecReader_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_VecReader_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_VecReader_U0_ap_ready <= ap_sync_VecReader_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    VecDotProduct_entry43_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = VecDotProduct_entry43_U0_ap_ready))) then 
                VecDotProduct_entry43_U0_ap_ready_count <= std_logic_vector(unsigned(VecDotProduct_entry43_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (ap_const_logic_1 = VecDotProduct_entry43_U0_ap_ready))) then 
                VecDotProduct_entry43_U0_ap_ready_count <= std_logic_vector(unsigned(VecDotProduct_entry43_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    VecReader1_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = VecReader1_U0_ap_ready))) then 
                VecReader1_U0_ap_ready_count <= std_logic_vector(unsigned(VecReader1_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (ap_const_logic_1 = VecReader1_U0_ap_ready))) then 
                VecReader1_U0_ap_ready_count <= std_logic_vector(unsigned(VecReader1_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    VecReader_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = VecReader_U0_ap_ready))) then 
                VecReader_U0_ap_ready_count <= std_logic_vector(unsigned(VecReader_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (ap_const_logic_1 = VecReader_U0_ap_ready))) then 
                VecReader_U0_ap_ready_count <= std_logic_vector(unsigned(VecReader_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    Accumulator_U0_ap_continue <= ap_const_logic_1;
    Accumulator_U0_ap_start <= start_for_Accumulator_U0_empty_n;
    Accumulator_U0_start_full_n <= ap_const_logic_1;
    Accumulator_U0_start_write <= ap_const_logic_0;
    AdderTree_U0_ap_continue <= ap_const_logic_1;
    AdderTree_U0_ap_start <= start_for_AdderTree_U0_empty_n;
    EWiseMultipiler_U0_ap_continue <= ap_const_logic_1;
    EWiseMultipiler_U0_ap_start <= start_for_EWiseMultipiler_U0_empty_n;
    ScaWriter_U0_ap_continue <= ap_const_logic_1;
    ScaWriter_U0_ap_start <= start_for_ScaWriter_U0_empty_n;
    ScaWriter_U0_start_full_n <= ap_const_logic_1;
    ScaWriter_U0_start_write <= ap_const_logic_0;
    VecDotProduct_entry43_U0_ap_continue <= ap_const_logic_1;
    VecDotProduct_entry43_U0_ap_start <= ((ap_sync_reg_VecDotProduct_entry43_U0_ap_ready xor ap_const_logic_1) and ap_start);
    VecReader1_U0_ap_continue <= ap_const_logic_1;
    VecReader1_U0_ap_start <= ((ap_sync_reg_VecReader1_U0_ap_ready xor ap_const_logic_1) and ap_start);
    VecReader1_U0_start_full_n <= ap_const_logic_1;
    VecReader1_U0_start_write <= ap_const_logic_0;
    VecReader_U0_ap_continue <= ap_const_logic_1;
    VecReader_U0_ap_start <= ((ap_sync_reg_VecReader_U0_ap_ready xor ap_const_logic_1) and ap_start);
    ap_done <= ScaWriter_U0_ap_done;
    ap_idle <= (VecReader_U0_ap_idle and VecReader1_U0_ap_idle and VecDotProduct_entry43_U0_ap_idle and ScaWriter_U0_ap_idle and EWiseMultipiler_U0_ap_idle and AdderTree_U0_ap_idle and Accumulator_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_VecDotProduct_entry43_U0_ap_ready <= (ap_sync_reg_VecDotProduct_entry43_U0_ap_ready or VecDotProduct_entry43_U0_ap_ready);
    ap_sync_VecReader1_U0_ap_ready <= (ap_sync_reg_VecReader1_U0_ap_ready or VecReader1_U0_ap_ready);
    ap_sync_VecReader_U0_ap_ready <= (ap_sync_reg_VecReader_U0_ap_ready or VecReader_U0_ap_ready);
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= ScaWriter_U0_ap_done;
    ap_sync_ready <= (ap_sync_VecReader_U0_ap_ready and ap_sync_VecReader1_U0_ap_ready and ap_sync_VecDotProduct_entry43_U0_ap_ready);
    start_for_Accumulator_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_AdderTree_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_EWiseMultipiler_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_ScaWriter_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
