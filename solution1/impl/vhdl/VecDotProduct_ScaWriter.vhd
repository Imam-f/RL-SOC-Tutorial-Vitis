-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity VecDotProduct_ScaWriter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fifoC325_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    fifoC325_empty_n : IN STD_LOGIC;
    fifoC325_read : OUT STD_LOGIC;
    m_axi_ddr2_AWVALID : OUT STD_LOGIC;
    m_axi_ddr2_AWREADY : IN STD_LOGIC;
    m_axi_ddr2_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ddr2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ddr2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr2_WVALID : OUT STD_LOGIC;
    m_axi_ddr2_WREADY : IN STD_LOGIC;
    m_axi_ddr2_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ddr2_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr2_WLAST : OUT STD_LOGIC;
    m_axi_ddr2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr2_ARVALID : OUT STD_LOGIC;
    m_axi_ddr2_ARREADY : IN STD_LOGIC;
    m_axi_ddr2_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ddr2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ddr2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr2_RVALID : IN STD_LOGIC;
    m_axi_ddr2_RREADY : OUT STD_LOGIC;
    m_axi_ddr2_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ddr2_RLAST : IN STD_LOGIC;
    m_axi_ddr2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr2_BVALID : IN STD_LOGIC;
    m_axi_ddr2_BREADY : OUT STD_LOGIC;
    m_axi_ddr2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ddr2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    ddr_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    ddr_empty_n : IN STD_LOGIC;
    ddr_read : OUT STD_LOGIC );
end;


architecture behav of VecDotProduct_ScaWriter is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fifoC325_blk_n : STD_LOGIC;
    signal ddr2_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ddr2_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ddr2_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ddr_blk_n : STD_LOGIC;
    signal tmp_reg_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ddr2_addr_reg_97 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln12_fu_82_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_72_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((m_axi_ddr2_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ddr_empty_n = ap_const_logic_0) or (fifoC325_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                ddr2_addr_reg_97 <= sext_ln12_fu_82_p1(32 - 1 downto 0);
                tmp_reg_92 <= fifoC325_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, fifoC325_empty_n, m_axi_ddr2_AWREADY, m_axi_ddr2_WREADY, m_axi_ddr2_BVALID, ddr_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ddr_empty_n = ap_const_logic_0) or (fifoC325_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((m_axi_ddr2_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((m_axi_ddr2_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((m_axi_ddr2_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, fifoC325_empty_n, ddr_empty_n)
    begin
                ap_block_state1 <= ((ddr_empty_n = ap_const_logic_0) or (fifoC325_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, m_axi_ddr2_BVALID, ap_CS_fsm_state8)
    begin
        if (((m_axi_ddr2_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_ddr2_BVALID, ap_CS_fsm_state8)
    begin
        if (((m_axi_ddr2_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ddr2_blk_n_AW_assign_proc : process(m_axi_ddr2_AWREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ddr2_blk_n_AW <= m_axi_ddr2_AWREADY;
        else 
            ddr2_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    ddr2_blk_n_B_assign_proc : process(m_axi_ddr2_BVALID, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ddr2_blk_n_B <= m_axi_ddr2_BVALID;
        else 
            ddr2_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    ddr2_blk_n_W_assign_proc : process(m_axi_ddr2_WREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ddr2_blk_n_W <= m_axi_ddr2_WREADY;
        else 
            ddr2_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    ddr_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ddr_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ddr_blk_n <= ddr_empty_n;
        else 
            ddr_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ddr_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, fifoC325_empty_n, ddr_empty_n)
    begin
        if ((not(((ddr_empty_n = ap_const_logic_0) or (fifoC325_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ddr_read <= ap_const_logic_1;
        else 
            ddr_read <= ap_const_logic_0;
        end if; 
    end process;


    fifoC325_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, fifoC325_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            fifoC325_blk_n <= fifoC325_empty_n;
        else 
            fifoC325_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifoC325_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, fifoC325_empty_n, ddr_empty_n)
    begin
        if ((not(((ddr_empty_n = ap_const_logic_0) or (fifoC325_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            fifoC325_read <= ap_const_logic_1;
        else 
            fifoC325_read <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_ddr2_ARADDR <= ap_const_lv32_0;
    m_axi_ddr2_ARBURST <= ap_const_lv2_0;
    m_axi_ddr2_ARCACHE <= ap_const_lv4_0;
    m_axi_ddr2_ARID <= ap_const_lv1_0;
    m_axi_ddr2_ARLEN <= ap_const_lv32_0;
    m_axi_ddr2_ARLOCK <= ap_const_lv2_0;
    m_axi_ddr2_ARPROT <= ap_const_lv3_0;
    m_axi_ddr2_ARQOS <= ap_const_lv4_0;
    m_axi_ddr2_ARREGION <= ap_const_lv4_0;
    m_axi_ddr2_ARSIZE <= ap_const_lv3_0;
    m_axi_ddr2_ARUSER <= ap_const_lv1_0;
    m_axi_ddr2_ARVALID <= ap_const_logic_0;
    m_axi_ddr2_AWADDR <= ddr2_addr_reg_97;
    m_axi_ddr2_AWBURST <= ap_const_lv2_0;
    m_axi_ddr2_AWCACHE <= ap_const_lv4_0;
    m_axi_ddr2_AWID <= ap_const_lv1_0;
    m_axi_ddr2_AWLEN <= ap_const_lv32_1;
    m_axi_ddr2_AWLOCK <= ap_const_lv2_0;
    m_axi_ddr2_AWPROT <= ap_const_lv3_0;
    m_axi_ddr2_AWQOS <= ap_const_lv4_0;
    m_axi_ddr2_AWREGION <= ap_const_lv4_0;
    m_axi_ddr2_AWSIZE <= ap_const_lv3_0;
    m_axi_ddr2_AWUSER <= ap_const_lv1_0;

    m_axi_ddr2_AWVALID_assign_proc : process(m_axi_ddr2_AWREADY, ap_CS_fsm_state2)
    begin
        if (((m_axi_ddr2_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_ddr2_AWVALID <= ap_const_logic_1;
        else 
            m_axi_ddr2_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_ddr2_BREADY_assign_proc : process(m_axi_ddr2_BVALID, ap_CS_fsm_state8)
    begin
        if (((m_axi_ddr2_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            m_axi_ddr2_BREADY <= ap_const_logic_1;
        else 
            m_axi_ddr2_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_ddr2_RREADY <= ap_const_logic_0;
    m_axi_ddr2_WDATA <= tmp_reg_92;
    m_axi_ddr2_WID <= ap_const_lv1_0;
    m_axi_ddr2_WLAST <= ap_const_logic_0;
    m_axi_ddr2_WSTRB <= ap_const_lv4_F;
    m_axi_ddr2_WUSER <= ap_const_lv1_0;

    m_axi_ddr2_WVALID_assign_proc : process(m_axi_ddr2_WREADY, ap_CS_fsm_state3)
    begin
        if (((m_axi_ddr2_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_ddr2_WVALID <= ap_const_logic_1;
        else 
            m_axi_ddr2_WVALID <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln12_fu_82_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_72_p4),64));

    trunc_ln_fu_72_p4 <= ddr_dout(63 downto 2);
end behav;
