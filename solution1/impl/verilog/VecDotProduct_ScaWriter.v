// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module VecDotProduct_ScaWriter (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        fifoC325_dout,
        fifoC325_empty_n,
        fifoC325_read,
        m_axi_ddr2_AWVALID,
        m_axi_ddr2_AWREADY,
        m_axi_ddr2_AWADDR,
        m_axi_ddr2_AWID,
        m_axi_ddr2_AWLEN,
        m_axi_ddr2_AWSIZE,
        m_axi_ddr2_AWBURST,
        m_axi_ddr2_AWLOCK,
        m_axi_ddr2_AWCACHE,
        m_axi_ddr2_AWPROT,
        m_axi_ddr2_AWQOS,
        m_axi_ddr2_AWREGION,
        m_axi_ddr2_AWUSER,
        m_axi_ddr2_WVALID,
        m_axi_ddr2_WREADY,
        m_axi_ddr2_WDATA,
        m_axi_ddr2_WSTRB,
        m_axi_ddr2_WLAST,
        m_axi_ddr2_WID,
        m_axi_ddr2_WUSER,
        m_axi_ddr2_ARVALID,
        m_axi_ddr2_ARREADY,
        m_axi_ddr2_ARADDR,
        m_axi_ddr2_ARID,
        m_axi_ddr2_ARLEN,
        m_axi_ddr2_ARSIZE,
        m_axi_ddr2_ARBURST,
        m_axi_ddr2_ARLOCK,
        m_axi_ddr2_ARCACHE,
        m_axi_ddr2_ARPROT,
        m_axi_ddr2_ARQOS,
        m_axi_ddr2_ARREGION,
        m_axi_ddr2_ARUSER,
        m_axi_ddr2_RVALID,
        m_axi_ddr2_RREADY,
        m_axi_ddr2_RDATA,
        m_axi_ddr2_RLAST,
        m_axi_ddr2_RID,
        m_axi_ddr2_RUSER,
        m_axi_ddr2_RRESP,
        m_axi_ddr2_BVALID,
        m_axi_ddr2_BREADY,
        m_axi_ddr2_BRESP,
        m_axi_ddr2_BID,
        m_axi_ddr2_BUSER,
        ddr_dout,
        ddr_empty_n,
        ddr_read
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] fifoC325_dout;
input   fifoC325_empty_n;
output   fifoC325_read;
output   m_axi_ddr2_AWVALID;
input   m_axi_ddr2_AWREADY;
output  [31:0] m_axi_ddr2_AWADDR;
output  [0:0] m_axi_ddr2_AWID;
output  [31:0] m_axi_ddr2_AWLEN;
output  [2:0] m_axi_ddr2_AWSIZE;
output  [1:0] m_axi_ddr2_AWBURST;
output  [1:0] m_axi_ddr2_AWLOCK;
output  [3:0] m_axi_ddr2_AWCACHE;
output  [2:0] m_axi_ddr2_AWPROT;
output  [3:0] m_axi_ddr2_AWQOS;
output  [3:0] m_axi_ddr2_AWREGION;
output  [0:0] m_axi_ddr2_AWUSER;
output   m_axi_ddr2_WVALID;
input   m_axi_ddr2_WREADY;
output  [31:0] m_axi_ddr2_WDATA;
output  [3:0] m_axi_ddr2_WSTRB;
output   m_axi_ddr2_WLAST;
output  [0:0] m_axi_ddr2_WID;
output  [0:0] m_axi_ddr2_WUSER;
output   m_axi_ddr2_ARVALID;
input   m_axi_ddr2_ARREADY;
output  [31:0] m_axi_ddr2_ARADDR;
output  [0:0] m_axi_ddr2_ARID;
output  [31:0] m_axi_ddr2_ARLEN;
output  [2:0] m_axi_ddr2_ARSIZE;
output  [1:0] m_axi_ddr2_ARBURST;
output  [1:0] m_axi_ddr2_ARLOCK;
output  [3:0] m_axi_ddr2_ARCACHE;
output  [2:0] m_axi_ddr2_ARPROT;
output  [3:0] m_axi_ddr2_ARQOS;
output  [3:0] m_axi_ddr2_ARREGION;
output  [0:0] m_axi_ddr2_ARUSER;
input   m_axi_ddr2_RVALID;
output   m_axi_ddr2_RREADY;
input  [31:0] m_axi_ddr2_RDATA;
input   m_axi_ddr2_RLAST;
input  [0:0] m_axi_ddr2_RID;
input  [0:0] m_axi_ddr2_RUSER;
input  [1:0] m_axi_ddr2_RRESP;
input   m_axi_ddr2_BVALID;
output   m_axi_ddr2_BREADY;
input  [1:0] m_axi_ddr2_BRESP;
input  [0:0] m_axi_ddr2_BID;
input  [0:0] m_axi_ddr2_BUSER;
input  [63:0] ddr_dout;
input   ddr_empty_n;
output   ddr_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fifoC325_read;
reg m_axi_ddr2_AWVALID;
reg m_axi_ddr2_WVALID;
reg m_axi_ddr2_BREADY;
reg ddr_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    fifoC325_blk_n;
reg    ddr2_blk_n_AW;
wire    ap_CS_fsm_state2;
reg    ddr2_blk_n_W;
wire    ap_CS_fsm_state3;
reg    ddr2_blk_n_B;
wire    ap_CS_fsm_state8;
reg    ddr_blk_n;
reg   [31:0] tmp_reg_92;
reg    ap_block_state1;
reg   [31:0] ddr2_addr_reg_97;
wire  signed [63:0] sext_ln12_fu_82_p1;
wire   [61:0] trunc_ln_fu_72_p4;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((m_axi_ddr2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ddr_empty_n == 1'b0) | (fifoC325_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ddr2_addr_reg_97 <= sext_ln12_fu_82_p1;
        tmp_reg_92 <= fifoC325_dout;
    end
end

always @ (*) begin
    if (((m_axi_ddr2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_ddr2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ddr2_blk_n_AW = m_axi_ddr2_AWREADY;
    end else begin
        ddr2_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ddr2_blk_n_B = m_axi_ddr2_BVALID;
    end else begin
        ddr2_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ddr2_blk_n_W = m_axi_ddr2_WREADY;
    end else begin
        ddr2_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ddr_blk_n = ddr_empty_n;
    end else begin
        ddr_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ddr_empty_n == 1'b0) | (fifoC325_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ddr_read = 1'b1;
    end else begin
        ddr_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        fifoC325_blk_n = fifoC325_empty_n;
    end else begin
        fifoC325_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ddr_empty_n == 1'b0) | (fifoC325_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        fifoC325_read = 1'b1;
    end else begin
        fifoC325_read = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_ddr2_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_ddr2_AWVALID = 1'b1;
    end else begin
        m_axi_ddr2_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_ddr2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        m_axi_ddr2_BREADY = 1'b1;
    end else begin
        m_axi_ddr2_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_ddr2_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_ddr2_WVALID = 1'b1;
    end else begin
        m_axi_ddr2_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ddr_empty_n == 1'b0) | (fifoC325_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((m_axi_ddr2_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((m_axi_ddr2_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((m_axi_ddr2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state1 = ((ddr_empty_n == 1'b0) | (fifoC325_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign m_axi_ddr2_ARADDR = 32'd0;

assign m_axi_ddr2_ARBURST = 2'd0;

assign m_axi_ddr2_ARCACHE = 4'd0;

assign m_axi_ddr2_ARID = 1'd0;

assign m_axi_ddr2_ARLEN = 32'd0;

assign m_axi_ddr2_ARLOCK = 2'd0;

assign m_axi_ddr2_ARPROT = 3'd0;

assign m_axi_ddr2_ARQOS = 4'd0;

assign m_axi_ddr2_ARREGION = 4'd0;

assign m_axi_ddr2_ARSIZE = 3'd0;

assign m_axi_ddr2_ARUSER = 1'd0;

assign m_axi_ddr2_ARVALID = 1'b0;

assign m_axi_ddr2_AWADDR = ddr2_addr_reg_97;

assign m_axi_ddr2_AWBURST = 2'd0;

assign m_axi_ddr2_AWCACHE = 4'd0;

assign m_axi_ddr2_AWID = 1'd0;

assign m_axi_ddr2_AWLEN = 32'd1;

assign m_axi_ddr2_AWLOCK = 2'd0;

assign m_axi_ddr2_AWPROT = 3'd0;

assign m_axi_ddr2_AWQOS = 4'd0;

assign m_axi_ddr2_AWREGION = 4'd0;

assign m_axi_ddr2_AWSIZE = 3'd0;

assign m_axi_ddr2_AWUSER = 1'd0;

assign m_axi_ddr2_RREADY = 1'b0;

assign m_axi_ddr2_WDATA = tmp_reg_92;

assign m_axi_ddr2_WID = 1'd0;

assign m_axi_ddr2_WLAST = 1'b0;

assign m_axi_ddr2_WSTRB = 4'd15;

assign m_axi_ddr2_WUSER = 1'd0;

assign sext_ln12_fu_82_p1 = $signed(trunc_ln_fu_72_p4);

assign trunc_ln_fu_72_p4 = {{ddr_dout[63:2]}};

endmodule //VecDotProduct_ScaWriter
