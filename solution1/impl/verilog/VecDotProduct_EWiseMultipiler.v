// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module VecDotProduct_EWiseMultipiler (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        fifoA21_dout,
        fifoA21_empty_n,
        fifoA21_read,
        fifoB22_dout,
        fifoB22_empty_n,
        fifoB22_read,
        fifoC123_din,
        fifoC123_full_n,
        fifoC123_write,
        readRep
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [127:0] fifoA21_dout;
input   fifoA21_empty_n;
output   fifoA21_read;
input  [127:0] fifoB22_dout;
input   fifoB22_empty_n;
output   fifoB22_read;
output  [255:0] fifoC123_din;
input   fifoC123_full_n;
output   fifoC123_write;
input  [31:0] readRep;

reg ap_done;
reg ap_idle;
reg start_write;
reg fifoA21_read;
reg fifoB22_read;
reg fifoC123_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    fifoA21_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln10_reg_731;
reg    fifoB22_blk_n;
reg    fifoC123_blk_n;
reg   [30:0] i_reg_131;
reg    ap_block_state1;
wire   [0:0] icmp_ln10_fu_146_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [30:0] add_ln10_fu_151_p2;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] zext_ln3_fu_142_p1;
wire  signed [7:0] trunc_ln674_fu_157_p1;
wire  signed [7:0] trunc_ln674_1_fu_165_p1;
wire  signed [7:0] p_Result_3_fu_179_p4;
wire  signed [7:0] p_Result_4_fu_193_p4;
wire  signed [7:0] p_Result_6_fu_213_p4;
wire  signed [7:0] p_Result_7_fu_227_p4;
wire  signed [7:0] p_Result_9_fu_247_p4;
wire  signed [7:0] p_Result_s_fu_261_p4;
wire  signed [7:0] p_Result_2_fu_281_p4;
wire  signed [7:0] p_Result_5_fu_295_p4;
wire  signed [7:0] p_Result_8_fu_315_p4;
wire  signed [7:0] p_Result_1_fu_329_p4;
wire  signed [7:0] p_Result_10_fu_349_p4;
wire  signed [7:0] p_Result_11_fu_363_p4;
wire  signed [7:0] p_Result_12_fu_383_p4;
wire  signed [7:0] p_Result_13_fu_397_p4;
wire  signed [7:0] p_Result_14_fu_417_p4;
wire  signed [7:0] p_Result_15_fu_431_p4;
wire  signed [7:0] p_Result_16_fu_451_p4;
wire  signed [7:0] p_Result_17_fu_465_p4;
wire  signed [7:0] p_Result_18_fu_485_p4;
wire  signed [7:0] p_Result_19_fu_499_p4;
wire  signed [7:0] p_Result_20_fu_519_p4;
wire  signed [7:0] p_Result_21_fu_533_p4;
wire  signed [7:0] p_Result_22_fu_553_p4;
wire  signed [7:0] p_Result_23_fu_567_p4;
wire  signed [7:0] p_Result_24_fu_587_p4;
wire  signed [7:0] p_Result_25_fu_601_p4;
wire  signed [7:0] p_Result_26_fu_621_p4;
wire  signed [7:0] p_Result_27_fu_635_p4;
wire  signed [7:0] p_Result_28_fu_655_p4;
wire  signed [7:0] p_Result_29_fu_669_p4;
wire   [15:0] mul_ln19_15_fu_683_p2;
wire   [15:0] mul_ln19_14_fu_649_p2;
wire   [15:0] mul_ln19_13_fu_615_p2;
wire   [15:0] mul_ln19_12_fu_581_p2;
wire   [15:0] mul_ln19_11_fu_547_p2;
wire   [15:0] mul_ln19_10_fu_513_p2;
wire   [15:0] mul_ln19_9_fu_479_p2;
wire   [15:0] mul_ln19_8_fu_445_p2;
wire   [15:0] mul_ln19_7_fu_411_p2;
wire   [15:0] mul_ln19_6_fu_377_p2;
wire   [15:0] mul_ln19_5_fu_343_p2;
wire   [15:0] mul_ln19_4_fu_309_p2;
wire   [15:0] mul_ln19_3_fu_275_p2;
wire   [15:0] mul_ln19_2_fu_241_p2;
wire   [15:0] mul_ln19_1_fu_207_p2;
wire   [15:0] mul_ln19_fu_173_p2;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

VecDotProduct_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U15(
    .din0(trunc_ln674_fu_157_p1),
    .din1(trunc_ln674_1_fu_165_p1),
    .dout(mul_ln19_fu_173_p2)
);

VecDotProduct_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U16(
    .din0(p_Result_3_fu_179_p4),
    .din1(p_Result_4_fu_193_p4),
    .dout(mul_ln19_1_fu_207_p2)
);

VecDotProduct_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U17(
    .din0(p_Result_6_fu_213_p4),
    .din1(p_Result_7_fu_227_p4),
    .dout(mul_ln19_2_fu_241_p2)
);

VecDotProduct_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U18(
    .din0(p_Result_9_fu_247_p4),
    .din1(p_Result_s_fu_261_p4),
    .dout(mul_ln19_3_fu_275_p2)
);

VecDotProduct_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U19(
    .din0(p_Result_2_fu_281_p4),
    .din1(p_Result_5_fu_295_p4),
    .dout(mul_ln19_4_fu_309_p2)
);

VecDotProduct_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U20(
    .din0(p_Result_8_fu_315_p4),
    .din1(p_Result_1_fu_329_p4),
    .dout(mul_ln19_5_fu_343_p2)
);

VecDotProduct_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U21(
    .din0(p_Result_10_fu_349_p4),
    .din1(p_Result_11_fu_363_p4),
    .dout(mul_ln19_6_fu_377_p2)
);

VecDotProduct_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U22(
    .din0(p_Result_12_fu_383_p4),
    .din1(p_Result_13_fu_397_p4),
    .dout(mul_ln19_7_fu_411_p2)
);

VecDotProduct_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U23(
    .din0(p_Result_14_fu_417_p4),
    .din1(p_Result_15_fu_431_p4),
    .dout(mul_ln19_8_fu_445_p2)
);

VecDotProduct_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U24(
    .din0(p_Result_16_fu_451_p4),
    .din1(p_Result_17_fu_465_p4),
    .dout(mul_ln19_9_fu_479_p2)
);

VecDotProduct_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U25(
    .din0(p_Result_18_fu_485_p4),
    .din1(p_Result_19_fu_499_p4),
    .dout(mul_ln19_10_fu_513_p2)
);

VecDotProduct_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U26(
    .din0(p_Result_20_fu_519_p4),
    .din1(p_Result_21_fu_533_p4),
    .dout(mul_ln19_11_fu_547_p2)
);

VecDotProduct_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U27(
    .din0(p_Result_22_fu_553_p4),
    .din1(p_Result_23_fu_567_p4),
    .dout(mul_ln19_12_fu_581_p2)
);

VecDotProduct_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U28(
    .din0(p_Result_24_fu_587_p4),
    .din1(p_Result_25_fu_601_p4),
    .dout(mul_ln19_13_fu_615_p2)
);

VecDotProduct_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U29(
    .din0(p_Result_26_fu_621_p4),
    .din1(p_Result_27_fu_635_p4),
    .dout(mul_ln19_14_fu_649_p2)
);

VecDotProduct_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U30(
    .din0(p_Result_28_fu_655_p4),
    .din1(p_Result_29_fu_669_p4),
    .dout(mul_ln19_15_fu_683_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln10_fu_146_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_131 <= add_ln10_fu_151_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_131 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln10_reg_731 <= icmp_ln10_fu_146_p2;
    end
end

always @ (*) begin
    if ((icmp_ln10_fu_146_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_731 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifoA21_blk_n = fifoA21_empty_n;
    end else begin
        fifoA21_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_731 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifoA21_read = 1'b1;
    end else begin
        fifoA21_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_731 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifoB22_blk_n = fifoB22_empty_n;
    end else begin
        fifoB22_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_731 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifoB22_read = 1'b1;
    end else begin
        fifoB22_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_731 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifoC123_blk_n = fifoC123_full_n;
    end else begin
        fifoC123_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_731 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifoC123_write = 1'b1;
    end else begin
        fifoC123_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln10_fu_146_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln10_fu_146_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_151_p2 = (i_reg_131 + 31'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln10_reg_731 == 1'd1) & (fifoC123_full_n == 1'b0)) | ((icmp_ln10_reg_731 == 1'd1) & (fifoB22_empty_n == 1'b0)) | ((icmp_ln10_reg_731 == 1'd1) & (fifoA21_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln10_reg_731 == 1'd1) & (fifoC123_full_n == 1'b0)) | ((icmp_ln10_reg_731 == 1'd1) & (fifoB22_empty_n == 1'b0)) | ((icmp_ln10_reg_731 == 1'd1) & (fifoA21_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln10_reg_731 == 1'd1) & (fifoC123_full_n == 1'b0)) | ((icmp_ln10_reg_731 == 1'd1) & (fifoB22_empty_n == 1'b0)) | ((icmp_ln10_reg_731 == 1'd1) & (fifoA21_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((icmp_ln10_reg_731 == 1'd1) & (fifoC123_full_n == 1'b0)) | ((icmp_ln10_reg_731 == 1'd1) & (fifoB22_empty_n == 1'b0)) | ((icmp_ln10_reg_731 == 1'd1) & (fifoA21_empty_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign fifoC123_din = {{{{{{{{{{{{{{{{mul_ln19_15_fu_683_p2}, {mul_ln19_14_fu_649_p2}}, {mul_ln19_13_fu_615_p2}}, {mul_ln19_12_fu_581_p2}}, {mul_ln19_11_fu_547_p2}}, {mul_ln19_10_fu_513_p2}}, {mul_ln19_9_fu_479_p2}}, {mul_ln19_8_fu_445_p2}}, {mul_ln19_7_fu_411_p2}}, {mul_ln19_6_fu_377_p2}}, {mul_ln19_5_fu_343_p2}}, {mul_ln19_4_fu_309_p2}}, {mul_ln19_3_fu_275_p2}}, {mul_ln19_2_fu_241_p2}}, {mul_ln19_1_fu_207_p2}}, {mul_ln19_fu_173_p2}};

assign icmp_ln10_fu_146_p2 = (($signed(zext_ln3_fu_142_p1) < $signed(readRep)) ? 1'b1 : 1'b0);

assign p_Result_10_fu_349_p4 = {{fifoA21_dout[55:48]}};

assign p_Result_11_fu_363_p4 = {{fifoB22_dout[55:48]}};

assign p_Result_12_fu_383_p4 = {{fifoA21_dout[63:56]}};

assign p_Result_13_fu_397_p4 = {{fifoB22_dout[63:56]}};

assign p_Result_14_fu_417_p4 = {{fifoA21_dout[71:64]}};

assign p_Result_15_fu_431_p4 = {{fifoB22_dout[71:64]}};

assign p_Result_16_fu_451_p4 = {{fifoA21_dout[79:72]}};

assign p_Result_17_fu_465_p4 = {{fifoB22_dout[79:72]}};

assign p_Result_18_fu_485_p4 = {{fifoA21_dout[87:80]}};

assign p_Result_19_fu_499_p4 = {{fifoB22_dout[87:80]}};

assign p_Result_1_fu_329_p4 = {{fifoB22_dout[47:40]}};

assign p_Result_20_fu_519_p4 = {{fifoA21_dout[95:88]}};

assign p_Result_21_fu_533_p4 = {{fifoB22_dout[95:88]}};

assign p_Result_22_fu_553_p4 = {{fifoA21_dout[103:96]}};

assign p_Result_23_fu_567_p4 = {{fifoB22_dout[103:96]}};

assign p_Result_24_fu_587_p4 = {{fifoA21_dout[111:104]}};

assign p_Result_25_fu_601_p4 = {{fifoB22_dout[111:104]}};

assign p_Result_26_fu_621_p4 = {{fifoA21_dout[119:112]}};

assign p_Result_27_fu_635_p4 = {{fifoB22_dout[119:112]}};

assign p_Result_28_fu_655_p4 = {{fifoA21_dout[127:120]}};

assign p_Result_29_fu_669_p4 = {{fifoB22_dout[127:120]}};

assign p_Result_2_fu_281_p4 = {{fifoA21_dout[39:32]}};

assign p_Result_3_fu_179_p4 = {{fifoA21_dout[15:8]}};

assign p_Result_4_fu_193_p4 = {{fifoB22_dout[15:8]}};

assign p_Result_5_fu_295_p4 = {{fifoB22_dout[39:32]}};

assign p_Result_6_fu_213_p4 = {{fifoA21_dout[23:16]}};

assign p_Result_7_fu_227_p4 = {{fifoB22_dout[23:16]}};

assign p_Result_8_fu_315_p4 = {{fifoA21_dout[47:40]}};

assign p_Result_9_fu_247_p4 = {{fifoA21_dout[31:24]}};

assign p_Result_s_fu_261_p4 = {{fifoB22_dout[31:24]}};

assign start_out = real_start;

assign trunc_ln674_1_fu_165_p1 = fifoB22_dout[7:0];

assign trunc_ln674_fu_157_p1 = fifoA21_dout[7:0];

assign zext_ln3_fu_142_p1 = i_reg_131;

endmodule //VecDotProduct_EWiseMultipiler
