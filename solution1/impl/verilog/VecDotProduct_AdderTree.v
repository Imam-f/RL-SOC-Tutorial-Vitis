// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module VecDotProduct_AdderTree (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        fifoC123_dout,
        fifoC123_empty_n,
        fifoC123_read,
        fifoC224_din,
        fifoC224_full_n,
        fifoC224_write,
        readRep
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [255:0] fifoC123_dout;
input   fifoC123_empty_n;
output   fifoC123_read;
output  [31:0] fifoC224_din;
input   fifoC224_full_n;
output   fifoC224_write;
input  [31:0] readRep;

reg ap_done;
reg ap_idle;
reg start_write;
reg fifoC123_read;
reg fifoC224_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    fifoC123_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln35_reg_508;
reg    fifoC224_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln35_reg_508_pp0_iter1_reg;
reg   [30:0] i_reg_121;
reg    ap_block_state1;
wire   [0:0] icmp_ln35_fu_136_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [30:0] add_ln35_fu_141_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [19:0] scaC_fu_493_p2;
reg   [19:0] scaC_reg_517;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] zext_ln27_fu_132_p1;
wire   [15:0] trunc_ln674_fu_147_p1;
wire   [15:0] p_Result_s_fu_155_p4;
wire   [15:0] p_Result_31_fu_169_p4;
wire   [15:0] p_Result_32_fu_183_p4;
wire   [15:0] p_Result_33_fu_197_p4;
wire   [15:0] p_Result_34_fu_211_p4;
wire   [15:0] p_Result_35_fu_225_p4;
wire   [15:0] p_Result_36_fu_239_p4;
wire   [15:0] p_Result_37_fu_253_p4;
wire   [15:0] p_Result_38_fu_267_p4;
wire   [15:0] p_Result_39_fu_281_p4;
wire   [15:0] p_Result_40_fu_295_p4;
wire   [15:0] p_Result_41_fu_309_p4;
wire   [15:0] p_Result_42_fu_323_p4;
wire   [15:0] p_Result_43_fu_337_p4;
wire   [15:0] p_Result_44_fu_351_p4;
wire  signed [16:0] sext_ln674_fu_151_p1;
wire  signed [16:0] sext_ln31_fu_165_p1;
wire   [16:0] temp1_fu_365_p2;
wire  signed [16:0] sext_ln674_3_fu_193_p1;
wire  signed [16:0] sext_ln674_1_fu_179_p1;
wire   [16:0] add_ln49_fu_375_p2;
wire  signed [17:0] sext_ln43_fu_371_p1;
wire  signed [17:0] sext_ln49_fu_381_p1;
wire   [17:0] temp2_fu_385_p2;
wire  signed [18:0] sext_ln674_2_fu_207_p1;
wire  signed [18:0] sext_ln43_1_fu_391_p1;
wire  signed [16:0] sext_ln674_7_fu_249_p1;
wire  signed [16:0] sext_ln674_6_fu_235_p1;
wire   [16:0] add_ln55_1_fu_401_p2;
wire  signed [17:0] sext_ln674_5_fu_221_p1;
wire  signed [17:0] sext_ln55_fu_407_p1;
wire   [17:0] add_ln55_2_fu_411_p2;
wire   [18:0] add_ln55_fu_395_p2;
wire  signed [18:0] sext_ln55_1_fu_417_p1;
wire   [18:0] temp3_fu_421_p2;
wire  signed [19:0] sext_ln674_4_fu_263_p1;
wire  signed [19:0] sext_ln43_2_fu_427_p1;
wire  signed [16:0] sext_ln674_9_fu_291_p1;
wire  signed [16:0] sext_ln674_8_fu_277_p1;
wire   [16:0] add_ln59_1_fu_437_p2;
wire   [19:0] add_ln59_fu_431_p2;
wire  signed [19:0] sext_ln59_fu_443_p1;
wire  signed [16:0] sext_ln674_11_fu_319_p1;
wire  signed [16:0] sext_ln674_10_fu_305_p1;
wire   [16:0] add_ln59_3_fu_453_p2;
wire  signed [16:0] sext_ln32_fu_361_p1;
wire  signed [16:0] sext_ln674_13_fu_347_p1;
wire   [16:0] add_ln59_4_fu_463_p2;
wire  signed [17:0] sext_ln674_12_fu_333_p1;
wire  signed [17:0] sext_ln59_2_fu_469_p1;
wire   [17:0] add_ln59_5_fu_473_p2;
wire  signed [18:0] sext_ln59_1_fu_459_p1;
wire  signed [18:0] sext_ln59_3_fu_479_p1;
wire   [18:0] add_ln59_6_fu_483_p2;
wire   [19:0] add_ln59_2_fu_447_p2;
wire  signed [19:0] sext_ln59_4_fu_489_p1;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_fu_136_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_reg_121 <= add_ln35_fu_141_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_121 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln35_reg_508 <= icmp_ln35_fu_136_p2;
        icmp_ln35_reg_508_pp0_iter1_reg <= icmp_ln35_reg_508;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_reg_508 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        scaC_reg_517 <= scaC_fu_493_p2;
    end
end

always @ (*) begin
    if ((icmp_ln35_fu_136_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_reg_508 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifoC123_blk_n = fifoC123_empty_n;
    end else begin
        fifoC123_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln35_reg_508 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifoC123_read = 1'b1;
    end else begin
        fifoC123_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_reg_508_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        fifoC224_blk_n = fifoC224_full_n;
    end else begin
        fifoC224_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln35_reg_508_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fifoC224_write = 1'b1;
    end else begin
        fifoC224_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln35_fu_136_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((icmp_ln35_fu_136_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln35_fu_141_p2 = (i_reg_121 + 31'd1);

assign add_ln49_fu_375_p2 = ($signed(sext_ln674_3_fu_193_p1) + $signed(sext_ln674_1_fu_179_p1));

assign add_ln55_1_fu_401_p2 = ($signed(sext_ln674_7_fu_249_p1) + $signed(sext_ln674_6_fu_235_p1));

assign add_ln55_2_fu_411_p2 = ($signed(sext_ln674_5_fu_221_p1) + $signed(sext_ln55_fu_407_p1));

assign add_ln55_fu_395_p2 = ($signed(sext_ln674_2_fu_207_p1) + $signed(sext_ln43_1_fu_391_p1));

assign add_ln59_1_fu_437_p2 = ($signed(sext_ln674_9_fu_291_p1) + $signed(sext_ln674_8_fu_277_p1));

assign add_ln59_2_fu_447_p2 = ($signed(add_ln59_fu_431_p2) + $signed(sext_ln59_fu_443_p1));

assign add_ln59_3_fu_453_p2 = ($signed(sext_ln674_11_fu_319_p1) + $signed(sext_ln674_10_fu_305_p1));

assign add_ln59_4_fu_463_p2 = ($signed(sext_ln32_fu_361_p1) + $signed(sext_ln674_13_fu_347_p1));

assign add_ln59_5_fu_473_p2 = ($signed(sext_ln674_12_fu_333_p1) + $signed(sext_ln59_2_fu_469_p1));

assign add_ln59_6_fu_483_p2 = ($signed(sext_ln59_1_fu_459_p1) + $signed(sext_ln59_3_fu_479_p1));

assign add_ln59_fu_431_p2 = ($signed(sext_ln674_4_fu_263_p1) + $signed(sext_ln43_2_fu_427_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln35_reg_508_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (fifoC224_full_n == 1'b0)) | ((icmp_ln35_reg_508 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (fifoC123_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln35_reg_508_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (fifoC224_full_n == 1'b0)) | ((icmp_ln35_reg_508 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (fifoC123_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln35_reg_508_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (fifoC224_full_n == 1'b0)) | ((icmp_ln35_reg_508 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (fifoC123_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln35_reg_508 == 1'd1) & (fifoC123_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((icmp_ln35_reg_508_pp0_iter1_reg == 1'd1) & (fifoC224_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign fifoC224_din = $signed(scaC_reg_517);

assign icmp_ln35_fu_136_p2 = (($signed(zext_ln27_fu_132_p1) < $signed(readRep)) ? 1'b1 : 1'b0);

assign p_Result_31_fu_169_p4 = {{fifoC123_dout[47:32]}};

assign p_Result_32_fu_183_p4 = {{fifoC123_dout[63:48]}};

assign p_Result_33_fu_197_p4 = {{fifoC123_dout[79:64]}};

assign p_Result_34_fu_211_p4 = {{fifoC123_dout[95:80]}};

assign p_Result_35_fu_225_p4 = {{fifoC123_dout[111:96]}};

assign p_Result_36_fu_239_p4 = {{fifoC123_dout[127:112]}};

assign p_Result_37_fu_253_p4 = {{fifoC123_dout[143:128]}};

assign p_Result_38_fu_267_p4 = {{fifoC123_dout[159:144]}};

assign p_Result_39_fu_281_p4 = {{fifoC123_dout[175:160]}};

assign p_Result_40_fu_295_p4 = {{fifoC123_dout[191:176]}};

assign p_Result_41_fu_309_p4 = {{fifoC123_dout[207:192]}};

assign p_Result_42_fu_323_p4 = {{fifoC123_dout[223:208]}};

assign p_Result_43_fu_337_p4 = {{fifoC123_dout[239:224]}};

assign p_Result_44_fu_351_p4 = {{fifoC123_dout[255:240]}};

assign p_Result_s_fu_155_p4 = {{fifoC123_dout[31:16]}};

assign scaC_fu_493_p2 = ($signed(add_ln59_2_fu_447_p2) + $signed(sext_ln59_4_fu_489_p1));

assign sext_ln31_fu_165_p1 = $signed(p_Result_s_fu_155_p4);

assign sext_ln32_fu_361_p1 = $signed(p_Result_44_fu_351_p4);

assign sext_ln43_1_fu_391_p1 = $signed(temp2_fu_385_p2);

assign sext_ln43_2_fu_427_p1 = $signed(temp3_fu_421_p2);

assign sext_ln43_fu_371_p1 = $signed(temp1_fu_365_p2);

assign sext_ln49_fu_381_p1 = $signed(add_ln49_fu_375_p2);

assign sext_ln55_1_fu_417_p1 = $signed(add_ln55_2_fu_411_p2);

assign sext_ln55_fu_407_p1 = $signed(add_ln55_1_fu_401_p2);

assign sext_ln59_1_fu_459_p1 = $signed(add_ln59_3_fu_453_p2);

assign sext_ln59_2_fu_469_p1 = $signed(add_ln59_4_fu_463_p2);

assign sext_ln59_3_fu_479_p1 = $signed(add_ln59_5_fu_473_p2);

assign sext_ln59_4_fu_489_p1 = $signed(add_ln59_6_fu_483_p2);

assign sext_ln59_fu_443_p1 = $signed(add_ln59_1_fu_437_p2);

assign sext_ln674_10_fu_305_p1 = $signed(p_Result_40_fu_295_p4);

assign sext_ln674_11_fu_319_p1 = $signed(p_Result_41_fu_309_p4);

assign sext_ln674_12_fu_333_p1 = $signed(p_Result_42_fu_323_p4);

assign sext_ln674_13_fu_347_p1 = $signed(p_Result_43_fu_337_p4);

assign sext_ln674_1_fu_179_p1 = $signed(p_Result_31_fu_169_p4);

assign sext_ln674_2_fu_207_p1 = $signed(p_Result_33_fu_197_p4);

assign sext_ln674_3_fu_193_p1 = $signed(p_Result_32_fu_183_p4);

assign sext_ln674_4_fu_263_p1 = $signed(p_Result_37_fu_253_p4);

assign sext_ln674_5_fu_221_p1 = $signed(p_Result_34_fu_211_p4);

assign sext_ln674_6_fu_235_p1 = $signed(p_Result_35_fu_225_p4);

assign sext_ln674_7_fu_249_p1 = $signed(p_Result_36_fu_239_p4);

assign sext_ln674_8_fu_277_p1 = $signed(p_Result_38_fu_267_p4);

assign sext_ln674_9_fu_291_p1 = $signed(p_Result_39_fu_281_p4);

assign sext_ln674_fu_151_p1 = $signed(trunc_ln674_fu_147_p1);

assign start_out = real_start;

assign temp1_fu_365_p2 = ($signed(sext_ln674_fu_151_p1) + $signed(sext_ln31_fu_165_p1));

assign temp2_fu_385_p2 = ($signed(sext_ln43_fu_371_p1) + $signed(sext_ln49_fu_381_p1));

assign temp3_fu_421_p2 = ($signed(add_ln55_fu_395_p2) + $signed(sext_ln55_1_fu_417_p1));

assign trunc_ln674_fu_147_p1 = fifoC123_dout[15:0];

assign zext_ln27_fu_132_p1 = i_reg_121;

endmodule //VecDotProduct_AdderTree
